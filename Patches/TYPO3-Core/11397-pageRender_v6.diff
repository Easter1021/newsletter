Index: t3lib/class.t3lib_pagerender.php
===================================================================
--- t3lib/class.t3lib_pagerender.php	(revision 0)
+++ t3lib/class.t3lib_pagerender.php	(revision 0)
@@ -0,0 +1,1250 @@
+<?php
+/***************************************************************
+ *  Copyright notice
+ *
+ *  (c) 2009 Steffen Kamper (info@sk-typo3.de)
+ *  All rights reserved
+ *
+ *  This script is part of the TYPO3 project. The TYPO3 project is
+ *  free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  The GNU General Public License can be found at
+ *  http://www.gnu.org/copyleft/gpl.html.
+ *  A copy is found in the textfile GPL.txt and important notices to the license
+ *  from the author is found in LICENSE.txt distributed with these scripts.
+ *
+ *
+ *  This script is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  This copyright notice MUST APPEAR in all copies of the script!
+ ***************************************************************/
+
+/**
+ * TYPO3 pageRender class (new in TYPO3 4.3.0)
+ * This class render the HTML of a webpage, usable for BE and FE
+ *
+ * @author	Steffen Kamper <info@sk-typo3.de>
+ * @package TYPO3
+ * @subpackage t3lib
+ * $Id:$
+ */
+abstract class t3lib_pageRender implements t3lib_Singleton {
+	
+	protected $compressJavascript = FALSE;
+	protected $compressCss = FALSE;
+	protected $removeAllLineBreaksFromTemplate = FALSE;
+
+	protected $concatenateFiles = FALSE;
+
+	protected $moveJsFromHeaderToFooter = FALSE;
+
+	protected $csConvObj;
+	protected $lang;
+
+	// static array containing associative array for the included files
+	protected static $jsFiles = array ();
+	protected static $jsFooterFiles = array ();
+	protected static $jsLibs = array ();
+	protected static $jsFooterLibs = array ();
+	protected static $cssFiles = array ();
+
+	protected $title;
+	protected $charSet;
+	protected $favIcon;
+	protected $baseUrl;
+
+	// static header blocks
+	protected $xmlPrologAndDocType = '';
+	protected $metaTags = array ();
+	protected $inlineComments = array ();
+	protected $headerData = array ();
+	protected $footerData = array ();
+	protected $titleTag = '<title>|</title>';
+	protected $metaCharsetTag = '<meta http-equiv="Content-Type" content="text/html; charset=|" />';
+	protected $htmlTag = '<html>';
+	protected $headTag = '<head>';
+	protected $baseUrlTag = '<base href="|" />';
+	protected $iconMimeType = '';
+	protected $shortcutTag = '<link rel="shortcut icon" href="%1$s"%2$s />
+<link rel="icon" href="%1$s"%2$s />';
+
+	// static inline code blocks
+	protected $jsInline = array ();
+	protected $extOnReadyCode = array ();
+	protected $cssInline = array ();
+
+	protected $bodyContent;
+
+	protected $templateFile;
+
+	protected $jsLibraryNames = array ('prototype', 'scriptaculous', 'extjs');
+
+	const PART_COMPLETE = 0;
+	const PART_HEADER = 1;
+	const PART_FOOTER = 2;
+
+	// internal flags for JS-libraries
+	protected $addPrototype = FALSE;
+	protected $addScriptaculous = FALSE;
+	protected $addScriptaculousModules = array ('builder' => FALSE, 'effects' => FALSE, 'dragdrop' => FALSE, 'controls' => FALSE, 'slider' => FALSE);
+	protected $addExtJS = FALSE;
+	protected $addExtCore = FALSE;
+	protected $extJSadapter = 'ext/ext-base.js';
+
+	protected $enableExtJsDebug = FALSE;
+	protected $enableExtCoreDebug = FALSE;
+
+	// available adapters for extJs
+	const EXTJS_ADAPTER_JQUERY = 'jquery';
+	const EXTJS_ADAPTER_PROTOTYPE = 'prototype';
+	const EXTJS_ADAPTER_YUI = 'yui';
+
+	protected $enableExtJSQuickTips = false;
+
+	protected $inlineLanguageLabels = array ();
+	protected $inlineSettings = array ();
+
+	protected $inlineJavascriptWrap = array ();
+
+	// used by BE modules
+	public $backPath;
+
+	/**
+	 * Constructor
+	 *
+	 * @param string $templateFile	declare the used template file. Omit this parameter will use default template
+	 * @param string $backPath	relative path to typo3-folder. It varies for BE modules, in FE it will be typo3/
+	 * @return void
+	 */
+	public function __construct($templateFile = '', $backPath = '') {
+
+		$this->reset();
+
+		if (strlen($templateFile)) {
+			$this->templateFile = $templateFile;
+		}
+		$this->backPath = $backPath;
+		
+		$this->inlineJavascriptWrap = array(
+			'<script type="text/javascript">' . chr(10) . '/*<![CDATA[*/' . chr(10) . '<!-- ' . chr(10),
+			'// -->' . chr(10) . '/*]]>*/' . chr(10) . '</script>' . chr(10)
+		);
+		$this->inlineCssWrap = array(
+			'<style type="text/css">' . chr(10) . '/*<![CDATA[*/' . chr(10) . '<!-- ' . chr(10),
+			'-->' . chr(10) . '/*]]>*/' . chr(10) . '</style>' . chr(10)
+		);
+
+	}
+	
+	/**
+	 * reset all vars to initial values
+	 * 
+	 * @return void
+	 */
+	protected function reset() {
+		$this->templateFile = TYPO3_mainDir . 'templates/pagerender.html';
+		$this->jsFiles = $this->jsFooterFiles = $this->jsInline = $this->jsFooterInline = $this->jsLibs = $this->cssFiles = $this->cssInline = $this->metaTags = $this->inlineComments = $this->headerData = $this->footerData = $this->extOnReadyCode = array ();
+	
+	}
+	/*****************************************************/
+	/*                                                   */
+	/*  Public Setters                                   */
+	/*                                                   */
+	/*                                                   */
+	/*****************************************************/
+
+	/**
+	 * Sets the title
+	 *
+	 * @param string $title	title of webpage
+	 * @return void
+	 */
+	public function setTitle($title) {
+		$this->title = $title;
+	}
+
+	/**
+	 * Sets xml prolog and docType
+	 *
+	 * @param string $xmlPrologAndDocType	complete tags for xml prolog and docType
+	 * @return void
+	 */
+	public function setXmlPrologAndDocType($xmlPrologAndDocType) {
+		$this->xmlPrologAndDocType = $xmlPrologAndDocType;
+	}
+
+	/**
+	 * Sets meta charset
+	 * @return void
+	 *
+	 * @param string $charSet	used charset
+	 */
+	public function setCharSet($charSet) {
+		$this->charSet = $charSet;
+	}
+
+	/**
+	 * Sets html tag
+	 *
+	 * @param string $htmlTag	html tag
+	 * @return void
+	 */
+	public function setHtmlTag($htmlTag) {
+		$this->htmlTag = $htmlTag;
+	}
+
+	/**
+	 * Sets head tag
+	 *
+	 * @param string $tag	head tag
+	 * @return void
+	 */
+	public function setHeadTag($headTag) {
+		$this->headTag = $headTag;
+	}
+
+	/**
+	 * Sets favicon
+	 *
+	 * @param string $favIcon
+	 * @return void
+	 */
+	public function setFavIcon($favIcon) {
+		$this->favIcon = $favIcon;
+	}
+
+	/**
+	 * Sets icon mime type
+	 *
+	 * @param string $iconMimeType
+	 * @return void
+	 */
+	public function setIconMimeType($iconMimeType) {
+		$this->iconMimeType = $iconMimeType;
+	}
+
+	/**
+	 * Sets base url
+	 *
+	 * @param string $url
+	 * @return void
+	 */
+	public function setBaseUrl($baseUrl) {
+		$this->baseUrl = $baseUrl;
+	}
+
+	/**
+	 * Sets template file
+	 *
+	 * @param string $file
+	 * @return void
+	 */
+	public function setTemplateFile($file) {
+		$this->templateFile = $file;
+	}
+
+	/**
+	 * Sets MoveJsFromHeaderToFooter
+	 *
+	 * @param void
+	 * @return void
+	 */
+	public function setMoveJsFromHeaderToFooter() {
+		$this->moveJsFromHeaderToFooter = TRUE;
+	}
+
+	/**
+	 * Sets compression of javascript
+	 *
+	 * @param void
+	 * @return void
+	 */
+	public function setCompressJavascript() {
+		$this->compressJavascript = TRUE;
+	}
+
+	/**
+	 * Sets compression of css
+	 *
+	 * @param void
+	 * @return void
+	 */
+	public function setCompressCss() {
+		$this->compressCss = TRUE;
+	}
+
+	/**
+	/**
+	 * Sets concatenation of js/css files
+	 *
+	 * @param void
+	 * @return void
+	 */
+	public function setConcatenateFiles() {
+		$this->concatenateFiles = TRUE;
+	}
+
+	/**
+	 * Sets removal of all line breaks in template
+	 *
+	 * @param void
+	 * @return void
+	 */
+	public function setRemoveAllLineBreaksFromTemplate() {
+		$this->removeEmptyLinesFromTemplate = TRUE;
+	}
+
+	/**
+	 * Sets Content for Body
+	 *
+	 * @param string $content
+	 * @return void
+	 */
+	public function setBodyContent($content) {
+		$this->bodyContent = $content;
+	}
+
+	/*****************************************************/
+	/*                                                   */
+	/*  Public Getters                                   */
+	/*                                                   */
+	/*                                                   */
+	/*****************************************************/
+
+	/**
+	 * Gets the title
+	 *
+	 * @return string $title		title of webpage
+	 */
+	public function getTitle() {
+		return $this->title;
+	}
+
+	/**
+	 * Gets the charSet
+	 *
+	 * @return string $charSet
+	 */
+	public function getCharSet() {
+		return $this->charSet;
+	}
+
+	/**
+	 * Gets html tag
+	 *
+	 * @return string $htmlTag	html tag
+	 */
+	public function getHtmlTag() {
+		return $this->htmlTag;
+	}
+
+	/**
+	 * Gets head tag
+	 *
+	 * @return string $tag	head tag
+	 */
+	public function getHeadTag() {
+		return $this->headTag;
+	}
+
+	/**
+	 * Gets favicon
+	 *
+	 * @return string $favIcon
+	 */
+	public function getFavIcon() {
+		return $this->favIcon;
+	}
+
+	/**
+	 * Gets icon mime type
+	 *
+	 * @return string $iconMimeType
+	 */
+	public function getIconMimeType() {
+		return $this->iconMimeType;
+	}
+
+	/**
+	 * Gets base url
+	 *
+	 * @return string $url
+	 */
+	public function getBaseUrl() {
+		return $this->baseUrl;
+	}
+
+	/**
+	 * Gets template file
+	 *
+	 * @return string $file
+	 */
+	public function getTemplateFile($file) {
+		return $this->templateFile;
+	}
+
+	/**
+	 * Gets MoveJsFromHeaderToFooter
+	 *
+	 * @return boolean 
+	 */
+	public function getMoveJsFromHeaderToFooter() {
+		return $this->moveJsFromHeaderToFooter;
+	}
+
+	/**
+	 * Gets compress of javascript
+	 *
+	 * @return boolean 
+	 */
+	public function getCompressJavascript() {
+		return $this->compressJavascript;
+	}
+
+	/**
+	 * Gets compress of css
+	 *
+	 * @return boolean 
+	 */
+	public function getCompressCss() {
+		return $this->compressCss;
+	}
+
+	/**
+	 * Gets concatenate of files
+	 *
+	 * @return boolean 
+	 */
+	public function getConcatenateFiles() {
+		return $this->concatenateFiles;
+	}
+
+	/**
+	 * Gets remove of empty lines from template
+	 *
+	 * @return boolean 
+	 */
+	public function getRemoveAllLineBreaksFromTemplate() {
+		return $this->removeAllLineBreaksFromTemplate;
+	}
+
+	/**
+	 * Gets content for body
+	 *
+	 * @return string
+	 */
+	public function getBodyContent() {
+		return $this->bodyContent;
+	}
+
+	/*****************************************************/
+	/*                                                   */
+	/*  Public Function to add Data                      */
+	/*                                                   */
+	/*                                                   */
+	/*****************************************************/
+	
+	/**
+	 * Adds meta data
+	 *
+	 * @param string $meta	meta data (complete metatag)
+	 * @return void
+	 */
+	public function addMetaTag($meta) {
+		if (! in_array($meta, $this->metaTags)) {
+			$this->metaTags[] = $meta;
+		}
+	}
+
+	/**
+	 * Adds inline HTML comment
+	 *
+	 * @param string $comment
+	 * @return void
+	 */
+	public function addInlineComment($comment) {
+		if (! in_array($comment, $this->inlineComments)) {
+			$this->inlineComments[] = $comment;
+		}
+	}
+
+	/**
+	 * Adds header data
+	 *
+	 * @param string $data 	free header data for HTML header
+	 * @return void
+	 */
+	public function addHeaderData($data) {
+		if (! in_array($data, $this->headerData)) {
+			$this->headerData[] = $data;
+		}
+	}
+
+	/**
+	 * Adds footer data
+	 *
+	 * @param string $data 	free header data for HTML header
+	 * @return void
+	 */
+	public function addFooterData($data) {
+		if (! in_array($data, $this->footerData)) {
+			$this->footerData[] = $data;
+		}
+	}
+
+	/* Javascript Files */
+	
+	/**
+	 * Adds JS Library. JS Library block is rendered on top of the JS files.
+	 *
+	 * @param string $name
+	 * @param string $file
+	 * @param string $type
+	 * @param boolean $compressed	flag if library is compressed
+	 * @param boolean $forceOnTop	flag if added library should be inserted at begin of this block
+	 * @param string $allWrap
+	 * @return void
+	 */
+	public function addJsLibrary($name, $file, $type = 'text/javascript', $compressed = TRUE, $forceOnTop = FALSE, $allWrap = '') {
+		if (! in_array(strtolower($name), $this->jsLibs)) {
+			$this->jsLibs[strtolower($name)] = array (
+				'file'        => $file, 
+				'type'        => $type, 
+				'section'     => self::PART_HEADER,
+				'compressed'  => $compressed, 
+				'forceOnTop'  => $forceOnTop,
+				'allWrap'     => $allWrap
+			);
+		}
+	
+	}
+
+	/**
+	 * Adds JS Library to Footer. JS Library block is rendered on top of the Footer JS files.
+	 *
+	 * @param string $name
+	 * @param string $file
+	 * @param string $type
+	 * @param boolean $compressed	flag if library is compressed
+	 * @param boolean $forceOnTop	flag if added library should be inserted at begin of this block
+	 * @param string $allWrap
+	 * @return void
+	 */
+	public function addJsFooterLibrary($name, $file, $type = 'text/javascript', $compressed = TRUE, $forceOnTop = FALSE, $allWrap = '') {
+		if (! in_array(strtolower($name), $this->jsLibs)) {
+			$this->jsLibs[strtolower($name)] = array (
+				'file'        => $file, 
+				'type'        => $type, 
+				'section'     => self::PART_FOOTER,
+				'compressed'  => $compressed, 
+				'forceOnTop'  => $forceOnTop,
+				'allWrap'     => $allWrap
+			);
+		}
+	
+	}
+
+	/**
+	 * Adds JS file
+	 *
+	 * @param string $file
+	 * @param string $type
+	 * @param boolean $compressed
+	 * @param boolean $forceOnTop
+	 * @param string $allWrap
+	 * @return void
+	 */
+	public function addJsFile($file, $type = 'text/javascript', $compressed = FALSE, $forceOnTop = FALSE, $allWrap = '') {
+		if (!isset($this->jsFiles[$file])) {
+			$this->jsFiles[$file] = array (
+				'type'        => $type, 
+				'section'     => self::PART_HEADER, 
+				'compressed'  => $compressed, 
+				'forceOnTop'  => $forceOnTop, 
+				'allWrap'     => $allWrap
+			);
+		}
+	}
+
+	/**
+	 * Adds JS file to footer
+	 *
+	 * @param string $file
+	 * @param string $type
+	 * @param boolean $compressed
+	 * @param boolean $forceOnTop
+	 * @return void
+	 */
+	public function addJsFooterFile($file, $type = 'text/javascript', $compressed = FALSE, $forceOnTop = FALSE, $allWrap = '') {
+		if (!isset($this->jsFiles[$file])) {
+			$this->jsFiles[$file] = array (
+				'type'        => $type, 
+				'section'     => self::PART_FOOTER, 
+				'compressed'  => $compressed, 
+				'forceOnTop'  => $forceOnTop, 
+				'allWrap'     => $allWrap
+			);
+		}
+	}
+
+	/*Javascript Inline Blocks */
+	
+	/**
+	 * Adds JS inline code
+	 *
+	 * @param string $name
+	 * @param string $block
+	 * @param boolean $compressed
+	 * @param boolean $forceOnTop
+	 * @return void
+	 */
+	public function addJsInlineCode($name, $block, $compressed = FALSE, $forceOnTop = FALSE) {
+		if (!isset($this->jsInline[$name])) {
+			$this->jsInline[$name] = array (
+				'code'        => $block . chr(10),
+				'section'     => self::PART_HEADER, 
+				'compressed'  => $compressed,
+				'forceOnTop'  => $forceOnTop
+			);
+		}
+	}
+
+	/**
+	 * Adds JS inline code to footer
+	 *
+	 * @param string $name
+	 * @param string $block
+	 * @param boolean $compressed
+	 * @param boolean $forceOnTop
+	 * @return void
+	 */
+	public function addJsFooterInlineCode($name, $block, $compressed = FALSE, $forceOnTop = FALSE) {
+		if (!isset($this->jsInline[$name])) {
+			$this->jsInline[$name] = array (
+				'code'        => $block . chr(10),
+				'section'     => self::PART_FOOTER,
+				'compressed'  => $compressed,
+				'forceOnTop'  => $forceOnTop
+			);
+		}
+	}
+
+	/**
+	 * Adds Ext.onready code, which will be wrapped in Ext.onReady(function() {...});
+	 *
+	 * @param string $block
+	 * @return void
+	 */
+	public function addExtOnReadyCode($block) {
+		if (!in_array($block, $this->extOnReadyCode)) {
+			$this->extOnReadyCode[] = $block;
+		}
+	}
+
+	/* CSS Files */
+	
+	/**
+	 * Adds CSS file
+	 *
+	 * @param string $file
+	 * @param string $rel
+	 * @param string $media
+	 * @param string $title
+	 * @param boolean $compressed
+	 * @param boolean $forceOnTop
+	 * @return void
+	 */
+	public function addCssFile($file, $rel = 'stylesheet', $media = 'screen', $title = '', $compressed = FALSE, $forceOnTop = FALSE, $allWrap = '') {
+		if (! isset($this->cssFiles[$file])) {
+			$this->cssFiles[$file] = array ('rel' => $rel, 'media' => $media, 'title' => $title, 'compressed' => $compressed, 'forceOnTop' => $forceOnTop, 'allWrap' => $allWrap);
+		}
+	}
+
+	/*CSS Inline Blocks */
+	
+	/**
+	 * Adds CSS inline code
+	 *
+	 * @param string $name
+	 * @param string $block
+	 * @param boolean $compressed
+	 * @param boolean $forceOnTop
+	 * @return void
+	 */
+	public function addCssInlineBlock($name, $block, $compressed = FALSE, $forceOnTop = FALSE) {
+		if (! isset($this->cssInline[$name])) {
+			$this->cssInline[$name] = array ('code' => $block, 'compressed' => $compressed, 'forceOnTop' => $forceOnTop);
+		}
+	}
+
+	/* JS Libraries */
+	
+	/**
+	 *  call function if you need the prototype library
+	 *
+	 * @return void
+	 */
+	public function loadPrototype() {
+		$this->addPrototype = TRUE;
+	}
+
+	/**
+	 * call function if you need the Scriptaculous library
+	 *
+	 * @param string $modules   add modules you need. use "all" if you need complete modules
+	 * @return void
+	 */
+	public function loadScriptaculous($modules = '') {
+		// Scriptaculous require prototype, so load prototype too.
+		$this->addPrototype = TRUE;
+		$this->addScriptaculous = TRUE;
+		if ($modules) {
+			if ($modules == 'all') {
+				foreach ($this->addScriptaculousModules as $key => $value) {
+					$this->addScriptaculousModules[$key] = TRUE;
+				}
+			} else {
+				$mods = t3lib_div::trimExplode(',', $modules);
+				foreach ($mods as $mod) {
+					if (isset($this->addScriptaculousModules[strtolower($mod)])) {
+						$this->addScriptaculousModules[strtolower($mod)] = TRUE;
+					}
+				}
+			}
+		}
+	}
+
+	/**
+	 * call this function if you need the extJS library
+	 *
+	 * @param boolean $css flag, if set the ext-css will be loaded
+	 * @param boolean $theme flag, if set the ext-theme "grey" will be loaded
+	 * @param string $adapter choose alternative adapter, possible values: yui, prototype, jquery
+	 * @return void
+	 */
+	public function loadExtJS($css = TRUE, $theme = TRUE, $adapter = '') {
+		if ($adapter) {
+			// empty $adapter will always load the ext adapter
+			switch (t3lib_div::strtolower(trim($adapter))) {
+				case self::EXTJS_ADAPTER_YUI :
+					$this->extJSadapter = 'yui/ext-yui-adapter.js';
+					break;
+				case self::EXTJS_ADAPTER_PROTOTYPE :
+					$this->extJSadapter = 'prototype/ext-prototype-adapter.js';
+					break;
+				case self::EXTJS_ADAPTER_JQUERY :
+					$this->extJSadapter = 'jquery/ext-jquery-adapter.js';
+					break;
+			}
+		}
+		if (! $this->addExtJS) {
+			$this->addExtJS = TRUE;
+			if ($theme) {
+				if (isset($GLOBALS['TBE_STYLES']['extJS']['theme'])) {
+					$this->addCssFile($this->backPath . $GLOBALS['TBE_STYLES']['extJS']['theme'], 'stylesheet', 'screen', '', FALSE, TRUE);
+				} else {
+					$this->addCssFile($this->backPath . 'contrib/extjs/resources/css/xtheme-blue.css', 'stylesheet', 'screen', '', FALSE, TRUE);
+				}
+			}
+			if ($css) {
+				if (isset($GLOBALS['TBE_STYLES']['extJS']['all'])) {
+					$this->addCssFile($this->backPath . $GLOBALS['TBE_STYLES']['extJS']['all'], 'stylesheet', 'screen', '', FALSE, TRUE);
+				} else {
+					$this->addCssFile($this->backPath . 'contrib/extjs/resources/css/ext-all-notheme.css', 'stylesheet', 'screen', '', FALSE, TRUE);
+				}
+			}
+		
+		}
+	}
+
+	/**
+	 * Enables ExtJs QuickTips
+	 * Need extJs loaded
+	 * 
+	 * @return void
+	 * 
+	 */
+	public function enableExtJSQuickTips() {
+		$this->enableExtJSQuickTips = TRUE;
+	}
+
+
+	/**
+	 * call function if you need the ExtCore library
+	 *
+	 * @return void
+	 */
+	public function loadExtCore() {
+		$this->addExtCore = TRUE;
+	}
+
+	/**	
+	 * call this function to load debug version of ExtJS. Use this for development only
+	 *
+	 */
+	public function enableExtJsDebug() {
+		$this->enableExtJsDebug = TRUE;
+	}
+
+	/**
+	 * call this function to load debug version of ExtCore. Use this for development only
+	 *
+	 * @return void
+	 */
+	public function enableExtCoreDebug() {
+		$this->enableExtCoreDebug = TRUE;
+	}
+
+	/**
+	 * Adds Javascript Inline Label. This will occur in TYPO3.lang - object
+	 * The label can be used in scripts with TYPO3.lang.<key>
+	 * Need extJs loaded
+	 * 
+	 * @param string $key
+	 * @param string $value
+	 * @return void
+	 */
+	public function addInlineLanguageLabel($key, $value) {
+		$this->inlineLanguageLabels[$key] = $value;
+	}
+
+	/**
+	 * Adds Javascript Inline Label Array. This will occur in TYPO3.lang - object
+	 * The label can be used in scripts with TYPO3.lang.<key>
+	 * Array will be merged with existing array.
+	 * Need extJs loaded   
+	 * 
+	 * @param array $array
+	 * @return void
+	 */
+	public function addInlineLanguageLabelArray(array $array) {
+		$this->inlineLanguageLabels = array_merge($this->inlineLanguageLabels, $array);
+	}
+
+	/**
+	 * Adds Javascript Inline Setting. This will occur in TYPO3.settings - object
+	 * The label can be used in scripts with TYPO3.setting.<key>
+	 * Need extJs loaded   
+	 * 
+	 * @param string $namespace
+	 * @param string $key
+	 * @param string $value
+	 * @return void
+	 */
+	public function addInlineSetting($namespace, $key, $value) {
+		if ($namespace) {
+			if (strpos($namespace, '.')) {
+				$parts = explode('.', $namespace);
+				$a = &$this->inlineSettings;
+				foreach ($parts as $part) {
+					$a = &$a[$part];
+				}
+				$a[$key] = $value;
+			} else {
+				$this->inlineSettings[$namespace][$key] = $value;
+			}
+		} else {
+			$this->inlineSettings[$key] = $value;
+		}
+	}
+
+	/**
+	 * Adds Javascript Inline Setting. This will occur in TYPO3.settings - object
+	 * The label can be used in scripts with TYPO3.setting.<key>
+	 * Array will be merged with existing array.
+	 * Need extJs loaded   
+	 * 
+	 * @param string $namespace
+	 * @param array $array
+	 * @return void
+	 */
+	public function addInlineSettingArray($namespace, array $array) {
+		if ($namespace) {
+			if (strpos($namespace, '.')) {
+				$parts = explode('.', $namespace);
+				$a = &$this->inlineSettings;
+				foreach ($parts as $part) {
+					$a = &$a[$part];
+				}
+				$a = array_merge((array) $a, $array);
+			} else {
+				$this->inlineSettings[$namespace] = array_merge((array) $this->inlineSettings[$namespace], $array);
+			}
+		} else {
+			$this->inlineSettings = array_merge($this->inlineSettings, $array);
+		}
+	}
+
+	/**
+	 * Adds content to body content
+	 *
+	 * @param string $content
+	 * @return void
+	 */
+	public function addBodyContent($content) {
+		$this->bodyContent .= $content;
+	}
+
+	/*****************************************************/
+	/*                                                   */
+	/*  Render Functions                                 */
+	/*                                                   */
+	/*                                                   */
+	/*****************************************************/
+	
+	/**
+	 * render the section (Header or Footer)
+	 *
+	 * @param int $part	section which should be rendered: self::PART_COMPLETE, self::PART_HEADER or self::PART_FOOTER
+	 * @return string	content of rendered section
+	 */
+	public function render($part = self::PART_COMPLETE) {
+
+		$jsFiles = $cssFiles = $cssInline = $jsInline = $jsFooterLibs = $jsFooterFiles = '';
+		$noJS = FALSE;
+
+		$jsLibs = $this->renderJsLibraries();
+
+		if ($this->compressCss || $this->compressJavascript) {
+			// do the file compression
+			$this->doCompress();
+		}
+		if ($this->concatenateFiles) {
+			// do the file concatenation
+			$this->doConcatenate();
+		}
+
+		$metaTags = implode(chr(10), $this->metaTags);
+
+		if (count($this->cssFiles)) {
+			foreach ($this->cssFiles as $file => $properties) {
+				$tag = '<link rel="' . $properties['rel'] . '" type="text/css" href="' . $file . '" media="' . $properties['media'] . '"' . ($properties['title'] ? ' title="' . $properties['title'] . '"' : '') . ' />';
+				if ($properties['allWrap'] && strpos($properties['allWrap'], '|') !== FALSE) {
+					$tag = str_replace('|', $tag, $properties['allWrap']);
+				}
+				if ($properties['forceOnTop']) {
+					$cssFiles = $tag . chr(10) . $cssFiles;
+				} else {
+					$cssFiles .= chr(10) . $tag;
+				}
+			}
+		}
+
+		if (count($this->cssInline)) {
+			
+			foreach ($this->cssInline as $name => $properties) {
+				if ($properties['forceOnTop']) {
+					$cssInline = '/*' . htmlspecialchars($name) . '*/' . chr(10) . $properties['code'] . chr(10) . $cssInline;
+				} else {
+					$cssInline .= '/*' . htmlspecialchars($name) . '*/' . chr(10) . $properties['code'] . chr(10);
+				}
+			}
+			$cssInline = $this->inlineCssWrap[0] . $cssInline . $this->inlineCssWrap[1];
+
+		}
+
+		if (count($this->jsLibs)) {
+			foreach ($this->jsLibs as $name => $properties) {
+				$tag = '<script src="' . $properties['file'] . '" type="' . $properties['type'] . '"></script>';
+				if ($properties['allWrap'] && strpos($properties['allWrap'], '|') !== FALSE) {
+					$tag = str_replace('|', $tag, $properties['allWrap']);
+				}
+				if ($properties['forceOnTop']) {
+					if ($properties['section'] === self::PART_HEADER) {
+						$jsLibs = $tag . chr(10) . $jsLibs;
+					} else {
+						$jsFooterLibs = $tag . chr(10) . $jsFooterLibs;
+					}
+				} else {
+					if ($properties['section'] === self::PART_HEADER) {
+						$jsLibs .= chr(10) . $tag;
+					} else {
+						$jsFooterLibs .= chr(10) . $tag;
+					}
+				}
+				
+			}
+		}
+
+		if (count($this->jsFiles)) {
+			foreach ($this->jsFiles as $file => $properties) {
+					$tag = '<script src="' . $file . '" type="' . $properties['type'] . '"></script>';
+					if ($properties['allWrap'] && strpos($properties['allWrap'], '|') !== FALSE) {
+						$tag = str_replace('|', $tag, $properties['allWrap']);
+					}
+					if ($properties['forceOnTop']) {
+						if ($properties['section'] === self::PART_HEADER) {
+							$jsFiles = $tag . chr(10) . $jsFiles;
+						} else {
+							$jsFooterFiles = $tag . chr(10) . $jsFooterFiles;
+						}
+					} else {
+						if ($properties['section'] === self::PART_HEADER) {
+							$jsFiles .= chr(10) . $tag;
+						} else {
+							$jsFooterFiles .= chr(10) . $tag;
+						}
+					}
+			}
+		}
+
+		if (count($this->jsInline)) {
+			foreach ($this->jsInline as $name => $properties) {
+				if ($properties['forceOnTop']) {
+					if ($properties['section'] === self::PART_HEADER) {
+						$jsInline = '/*' . htmlspecialchars($name) . '*/' . chr(10) . $properties['code'] . chr(10) . $jsInline;	
+					} else {
+						$jsFooterInline = '/*' . htmlspecialchars($name) . '*/' . chr(10) . $properties['code'] . chr(10) . $jsFooterInline;
+					}
+				} else {
+					if ($properties['section'] === self::PART_HEADER) {
+						$jsInline .= '/*' . htmlspecialchars($name) . '*/' . chr(10) . $properties['code'] . chr(10);
+					} else {
+						$jsFooterInline .= '/*' . htmlspecialchars($name) . '*/' . chr(10) . $properties['code'] . chr(10);
+					}
+				}
+			}
+		}
+
+
+		if ($jsInline) {
+			$jsInline = $this->inlineJavascriptWrap[0] . $jsInline . $this->inlineJavascriptWrap[1];
+		}
+
+		if ($jsFooterInline) {
+			$jsFooterInline = $this->inlineJavascriptWrap[0] . $jsFooterInline . $this->inlineJavascriptWrap[1];
+		}
+
+
+		// get template
+		$templateFile = t3lib_div::getFileAbsFileName($this->templateFile, TRUE);
+		$template = t3lib_div::getURL($templateFile);
+
+		if ($this->removeEmptyLinesFromTemplate) {
+			$template = strtr($template, array(chr(10) => '', chr(13) => ''));
+		}
+		if ($part != self::PART_COMPLETE) {
+			$templatePart = explode('###BODY###', $template);
+			$template = $templatePart[$part - 1];
+		}
+
+		if ($this->moveJsFromHeaderToFooter) {
+			$jsFooterLibs = $jsLibs . chr(10) . $jsFooterLibs;
+			$jsLibs = '';
+			$jsFooterFiles = $jsFiles . chr(10) . $jsFooterFiles;
+			$jsFiles = '';
+			$jsFooterInline = $jsInline . chr(10) . $jsFooterInline;
+			$jsInline = '';
+		}	
+
+		$markerArray = array(
+			'XMLPROLOG_DOCTYPE' => $this->xmlPrologAndDocType, 
+			'HTMLTAG'           => $this->htmlTag, 
+			'HEADTAG'           => $this->headTag, 
+			'METACHARSET'       => $this->charSet ? str_replace('|', htmlspecialchars($this->charSet), $this->metaCharsetTag) : '', 
+			'INLINECOMMENT'     => $this->inlineComments ? chr(10) . chr(10) . '<!-- ' . chr(10) . implode(chr(10), $this->inlineComments) . '-->' . chr(10) . chr(10) : '', 
+			'BASEURL'           => $this->baseUrl ? str_replace('|', $this->baseUrl, $this->baseUrlTag) : '',
+			'SHORTCUT'          => $this->favIcon ? sprintf($this->shortcutTag, htmlspecialchars($this->favIcon), $this->iconMimeType) : '', 
+			'CSS_INCLUDE'       => $cssFiles, 
+			'CSS_INLINE'        => $cssInline, 
+			'JS_INLINE'         => $jsInline, 
+			'JS_INCLUDE'        => $jsFiles, 
+			'JS_LIBS'        	=> $jsLibs, 
+			'TITLE'             => $this->title ? str_replace('|', htmlspecialchars($this->title), $this->titleTag) : '', 
+			'META'              => $metaTags, 
+			'HEADERDATA'        => $this->headerData ? implode(chr(10), $this->headerData) : '', 
+			'FOOTERDATA'        => $this->footerData ? implode(chr(10), $this->footerData) : '', 
+			'JS_LIBS_FOOTER' 	=> $jsFooterLibs, 
+			'JS_INCLUDE_FOOTER' => $jsFooterFiles, 
+			'JS_INLINE_FOOTER'  => $jsFooterInline,
+			'BODY'				=> $this->bodyContent, 
+		);
+
+		$markerArray = array_map('trim', $markerArray);
+
+		$this->reset();
+		return trim(t3lib_parsehtml::substituteMarkerArray($template, $markerArray, '###|###'));
+	}
+
+	/**
+	 * helper function for render the javascript libraries
+	 *
+	 * @return string	content with javascript libraries
+	 */
+	protected function renderJsLibraries() {
+		$out = '';
+
+		if ($this->addPrototype) {
+			$out .= '<script src="' . $this->backPath . 'contrib/prototype/prototype.js" type="text/javascript"></script>' . chr(10);
+			unset($this->jsFiles[$this->backPath . 'contrib/prototype/prototype.js']);
+		}
+
+		if ($this->addScriptaculous) {
+			$mods = array ();
+			foreach ($this->addScriptaculousModules as $key => $value) {
+				if ($this->addScriptaculousModules[$key]) {
+					$mods[] = $key;
+				}
+			}
+				// resolve dependencies
+			if (in_array('dragdrop', $mods) || in_array('controls', $mods)) {
+				$mods = array_merge(array ('effects'), $mods);
+			}
+
+			if (count($mods)) {
+				$moduleLoadString = '?load=' . implode(',', $mods);
+			}
+
+			$out .= '<script src="' . $this->backPath . 'contrib/scriptaculous/scriptaculous.js' . $moduleLoadString . '" type="text/javascript"></script>' . chr(10);
+			unset($this->jsFiles[$this->backPath . 'contrib/scriptaculous/scriptaculous.js' . $moduleLoadString]);
+		}
+
+			// include extCore
+		if ($this->addExtCore) {
+			$out .= '<script src="' . $this->backPath . 'contrib/extjs/ext-core' . ($this->enableExtCoreDebug ? '-debug' : '') . '.js" type="text/javascript"></script>' . chr(10);
+			unset($this->jsFiles[$this->backPath . 'contrib/extjs/ext-core' . ($this->enableExtCoreDebug ? '-debug' : '') . '.js']);
+		}
+
+			// include extJS
+		if ($this->addExtJS) {
+				// use the base adapter all the time
+			$out .= '<script src="' . $this->backPath . 'contrib/extjs/adapter/' . $this->extJSadapter . '" type="text/javascript"></script>' . chr(10);
+			$out .= '<script src="' . $this->backPath . 'contrib/extjs/ext-all' . ($this->enableExtJsDebug ? '-debug' : '') . '.js" type="text/javascript"></script>' . chr(10);
+
+				// add extJS localization
+			$localeMap = $this->csConvObj->isoArray; // load standard ISO mapping and modify for use with ExtJS
+			$localeMap[''] = 'en';
+			$localeMap['default'] = 'en';
+			$localeMap['gr'] = 'el_GR'; // Greek
+			$localeMap['no'] = 'no_BO'; // Norwegian Bokmaal
+			$localeMap['se'] = 'se_SV'; // Swedish
+
+
+			$extJsLang = isset($localeMap[$this->lang]) ? $localeMap[$this->lang] : $this->lang;
+				// TODO autoconvert file from UTF8 to current BE charset if necessary!!!!
+			$extJsLocaleFile = 'contrib/extjs/locale/ext-lang-' . $extJsLang . '-min.js';
+			if (file_exists(PATH_typo3 . $extJsLocaleFile)) {
+				$out .= '<script src="' . $this->backPath . $extJsLocaleFile . '" type="text/javascript"></script>' . chr(10);
+			}
+
+
+				// remove extjs from JScodeLibArray
+			unset(
+				$this->jsFiles[$this->backPath . 'contrib/extjs/ext-all.js'], $this->jsFiles[$this->backPath . 'contrib/extjs/ext-all-debug.js']
+			);
+		}
+		if ($this->addExtCore || $this->addExtJS) {
+			// set clear.gif, move it on top, add handler code
+			$code = '';
+			if (count($this->extOnReadyCode)) {
+				foreach ($this->extOnReadyCode as $block) {
+					$code .= $block;
+				}
+			}
+
+			$out .= $this->inlineJavascriptWrap[0] . '
+				Ext.ns("TYPO3");
+				Ext.BLANK_IMAGE_URL = "' . htmlspecialchars(t3lib_div::locationHeaderUrl($this->backPath . 'gfx/clear.gif')) . '";' . chr(10) . 
+				'TYPO3.lang = ' . json_encode($this->inlineLanguageLabels) . ';' . 'TYPO3.settings = ' . json_encode($this->inlineSettings) . ';' .
+				'Ext.onReady(function() {' .
+				($this->enableExtJSQuickTips ? 'Ext.QuickTips.init();' . chr(10) : '') . $code .
+				' });' . $this->inlineJavascriptWrap[1];
+			unset ($this->extOnReadyCode);
+		}
+
+		return $out;
+	}
+
+	/*****************************************************/
+	/*                                                   */
+	/*  Tools                                            */
+	/*                                                   */
+	/*                                                   */
+	/*****************************************************/
+	
+	/**
+	 * concatenate files into one file
+	 * registered handler
+	 * TODO: implement own method
+	 *
+	 * @return void
+	 */
+	protected function doConcatenate() {
+		// traverse the arrays, concatenate in one file
+		// then remove concatenated files from array and add the concatenated file
+
+
+		// extern concatination
+		if ($this->concatenateFiles && $GLOBALS['TYPO3_CONF_VARS'][TYPO3_MODE]['concatenateHandler']) {
+			// use extern concatenate routine
+			$params = array (
+				'jsLibs'         => &$this->jsLibs, 
+				'jsFiles'        => &$this->jsFiles, 
+				'jsFooterFiles'  => &$this->jsFiles, 
+				'cssFiles'       => &$this->cssFiles,
+			);
+			t3lib_div::callUserFunction($GLOBALS['TYPO3_CONF_VARS'][TYPO3_MODE]['concatenateHandler'], $params, $this);
+		} else {
+			// own method, nothing implemented atm
+
+
+		}
+	}
+
+	/**
+	 * compress inline code
+	 *
+	 */
+	protected function doCompress() {
+
+		if ($this->compressJavascript && $GLOBALS['TYPO3_CONF_VARS'][TYPO3_MODE]['jsCompressHandler']) {
+			// use extern compress routine
+			$params = array (
+				'jsInline'        => &$this->jsInline, 
+				'jsFooterInline'  => &$this->jsFooterInline
+			);
+			t3lib_div::callUserFunction($GLOBALS['TYPO3_CONF_VARS'][TYPO3_MODE]['jsCompressHandler'], $params, $this);
+		} else {
+			// traverse the arrays, compress files
+			$this->compressError = '';
+			
+			if ($this->compressJavascript) {
+				if (count($this->jsInline)) {
+					foreach ($this->jsInline as $name => $properties) {
+						if (!$properties['compressed']) {
+							$error = '';
+							$this->jsInline[$name]['code'] = t3lib_div::minifyJavaScript($properties['code'], $error);
+							if ($error) {
+								$this->compressError .= 'Error with minify JS Inline Block "' . $name . '": ' . $error . chr(10);
+							}
+						}
+					}
+				}
+			}
+		}
+
+		if ($this->compressCss && $GLOBALS['TYPO3_CONF_VARS'][TYPO3_MODE]['cssCompressHandler']) {
+			// use extern compress routine
+			$params = array (
+				'cssInline' => &$this->cssInline
+			);
+			t3lib_div::callUserFunction($GLOBALS['TYPO3_CONF_VARS'][TYPO3_MODE]['cssCompressHandler'], $params, $this);
+		} else {
+			if ($this->compressCss) {
+				// own method, nothing implemented atm
+			}
+		}
+	}
+
+}
+
+if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['t3lib/class.t3lib_pagerender.php']) {
+	include_once ($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['t3lib/class.t3lib_pagerender.php']);
+}
+?>
\ No newline at end of file
Index: t3lib/core_autoload.php
===================================================================
--- t3lib/core_autoload.php	(revision 5883)
+++ t3lib/core_autoload.php	(working copy)
@@ -40,6 +40,7 @@
 	't3lib_matchcondition' => PATH_t3lib . 'class.t3lib_matchcondition.php',
 	't3lib_modsettings' => PATH_t3lib . 'class.t3lib_modsettings.php',
 	't3lib_pageselect' => PATH_t3lib . 'class.t3lib_page.php',
+	't3lib_pagerender' => PATH_t3lib . 'class.t3lib_pagerender.php',
 	't3lib_pageselect_getpagehook' => PATH_t3lib . 'interfaces/interface.t3lib_pageselect_getpagehook.php',
 	't3lib_pagetree' => PATH_t3lib . 'class.t3lib_pagetree.php',
 	't3lib_parsehtml' => PATH_t3lib . 'class.t3lib_parsehtml.php',
Index: typo3/sysext/cms/tslib/class.tslib_fe.php
===================================================================
--- typo3/sysext/cms/tslib/class.tslib_fe.php	(revision 5883)
+++ typo3/sysext/cms/tslib/class.tslib_fe.php	(working copy)
@@ -190,7 +190,7 @@
  * @package TYPO3
  * @subpackage tslib
  */
- class tslib_fe	{
+ class tslib_fe extends t3lib_pageRender {
 
 		// CURRENT PAGE:
 	var $id='';							// The page id (int)
@@ -448,6 +448,7 @@
 
 		$this->csConvObj = t3lib_div::makeInstance('t3lib_cs');
 
+		
 			// Call post processing function for constructor:
 		if (is_array($this->TYPO3_CONF_VARS['SC_OPTIONS']['tslib/class.tslib_fe.php']['tslib_fe-PostProc']))	{
 			$_params = array('pObj' => &$this);
@@ -457,6 +458,7 @@
 		}
 
 		$this->initCaches();
+		parent::__construct();
 	}
 
 	/**
@@ -2041,6 +2043,16 @@
 
 					$this->config['FEData'] = $this->tmpl->setup['FEData'];
 					$this->config['FEData.'] = $this->tmpl->setup['FEData.'];
+					
+						// class for render Header and Footer parts
+					$template = '';
+					if ($this->pSetup['pageHeaderFooterTemplateFile']) {
+						$file = $this->tmpl->getFileName($this->pSetup['pageHeaderFooterTemplateFile']);
+						if ($file) {
+							$this->setTemplateFile($file);
+						}
+					}
+					
 				}
 				$GLOBALS['TT']->pull();
 			} else {
Index: typo3/sysext/cms/tslib/class.tslib_pagegen.php
===================================================================
--- typo3/sysext/cms/tslib/class.tslib_pagegen.php	(revision 5883)
+++ typo3/sysext/cms/tslib/class.tslib_pagegen.php	(working copy)
@@ -1,29 +1,29 @@
 <?php
 /***************************************************************
-*  Copyright notice
-*
-*  (c) 1999-2009 Kasper Skaarhoj (kasperYYYY@typo3.com)
-*  All rights reserved
-*
-*  This script is part of the TYPO3 project. The TYPO3 project is
-*  free software; you can redistribute it and/or modify
-*  it under the terms of the GNU General Public License as published by
-*  the Free Software Foundation; either version 2 of the License, or
-*  (at your option) any later version.
-*
-*  The GNU General Public License can be found at
-*  http://www.gnu.org/copyleft/gpl.html.
-*  A copy is found in the textfile GPL.txt and important notices to the license
-*  from the author is found in LICENSE.txt distributed with these scripts.
-*
-*
-*  This script is distributed in the hope that it will be useful,
-*  but WITHOUT ANY WARRANTY; without even the implied warranty of
-*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-*  GNU General Public License for more details.
-*
-*  This copyright notice MUST APPEAR in all copies of the script!
-***************************************************************/
+ *  Copyright notice
+ *
+ *  (c) 1999-2009 Kasper Skaarhoj (kasperYYYY@typo3.com)
+ *  All rights reserved
+ *
+ *  This script is part of the TYPO3 project. The TYPO3 project is
+ *  free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  The GNU General Public License can be found at
+ *  http://www.gnu.org/copyleft/gpl.html.
+ *  A copy is found in the textfile GPL.txt and important notices to the license
+ *  from the author is found in LICENSE.txt distributed with these scripts.
+ *
+ *
+ *  This script is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  This copyright notice MUST APPEAR in all copies of the script!
+ ***************************************************************/
 /**
  * Libraries for pagegen.php
  * The script "pagegen.php" is included by "index_ts.php" when a page is not cached but needs to be rendered.
@@ -57,24 +57,6 @@
  *
  */
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 /**
  * Class for starting TypoScript page generation
  *
@@ -86,251 +68,267 @@
  * @subpackage tslib
  */
 class TSpagegen {
-
+	
 	/**
 	 * Setting some vars in TSFE, primarily based on TypoScript config settings.
 	 *
 	 * @return	void
 	 */
 	public static function pagegenInit() {
-		if ($GLOBALS['TSFE']->page['content_from_pid']>0)	{
-			$temp_copy_TSFE = clone($GLOBALS['TSFE']);	// make REAL copy of TSFE object - not reference!
-			$temp_copy_TSFE->id = $GLOBALS['TSFE']->page['content_from_pid'];	// Set ->id to the content_from_pid value - we are going to evaluate this pid as was it a given id for a page-display!
-			$temp_copy_TSFE->getPageAndRootlineWithDomain($GLOBALS['TSFE']->config['config']['content_from_pid_allowOutsideDomain']?0:$GLOBALS['TSFE']->domainStartPage);
+		
+		if ($GLOBALS['TSFE']->page['content_from_pid'] > 0) {
+			$temp_copy_TSFE = clone ($GLOBALS['TSFE']); // make REAL copy of TSFE object - not reference!
+			$temp_copy_TSFE->id = $GLOBALS['TSFE']->page['content_from_pid']; // Set ->id to the content_from_pid value - we are going to evaluate this pid as was it a given id for a page-display!
+			$temp_copy_TSFE->getPageAndRootlineWithDomain($GLOBALS['TSFE']->config['config']['content_from_pid_allowOutsideDomain'] ? 0 : $GLOBALS['TSFE']->domainStartPage);
 			$GLOBALS['TSFE']->contentPid = intval($temp_copy_TSFE->id);
 			unset($temp_copy_TSFE);
 		}
-		if ($GLOBALS['TSFE']->config['config']['MP_defaults'])	{
-			$temp_parts = t3lib_div::trimExplode('|',$GLOBALS['TSFE']->config['config']['MP_defaults'],1);
+		if ($GLOBALS['TSFE']->config['config']['MP_defaults']) {
+			$temp_parts = t3lib_div::trimExplode('|', $GLOBALS['TSFE']->config['config']['MP_defaults'], 1);
 			foreach ($temp_parts as $temp_p) {
-				list($temp_idP,$temp_MPp) = explode(':',$temp_p,2);
-				$temp_ids=t3lib_div::intExplode(',',$temp_idP);
+				list ($temp_idP, $temp_MPp) = explode(':', $temp_p, 2);
+				$temp_ids = t3lib_div::intExplode(',', $temp_idP);
 				foreach ($temp_ids as $temp_id) {
-					$GLOBALS['TSFE']->MP_defaults[$temp_id]=$temp_MPp;
+					$GLOBALS['TSFE']->MP_defaults[$temp_id] = $temp_MPp;
 				}
 			}
 		}
-
-			// Global vars...
+		
+		// Global vars...
 		$GLOBALS['TSFE']->indexedDocTitle = $GLOBALS['TSFE']->page['title'];
-		$GLOBALS['TSFE']->debug = ''.$GLOBALS['TSFE']->config['config']['debug'];
-
-			// Base url:
-		if ($GLOBALS['TSFE']->config['config']['baseURL'])	{
-			if ($GLOBALS['TSFE']->config['config']['baseURL']==='1')	{
-					// Deprecated property, going to be dropped.
+		$GLOBALS['TSFE']->debug = '' . $GLOBALS['TSFE']->config['config']['debug'];
+		
+		// Base url:
+		if ($GLOBALS['TSFE']->config['config']['baseURL']) {
+			if ($GLOBALS['TSFE']->config['config']['baseURL'] === '1') {
+				// Deprecated property, going to be dropped.
 				$error = 'Unsupported TypoScript property was found in this template: "config.baseURL="1"
 
 This setting has been deprecated in TYPO 3.8.1 due to security concerns.
 You need to change this value to the URL of your website root, otherwise TYPO3 will not work!
 
 See <a href="http://wiki.typo3.org/index.php/TYPO3_3.8.1" target="_blank">wiki.typo3.org/index.php/TYPO3_3.8.1</a> for more information.';
-
+				
 				$GLOBALS['TSFE']->printError(nl2br($error));
-				exit;
+				exit();
 			} else {
 				$GLOBALS['TSFE']->baseUrl = $GLOBALS['TSFE']->config['config']['baseURL'];
 			}
-			$GLOBALS['TSFE']->anchorPrefix = substr(t3lib_div::getIndpEnv('TYPO3_REQUEST_URL'),strlen(t3lib_div::getIndpEnv('TYPO3_SITE_URL')));
+			$GLOBALS['TSFE']->anchorPrefix = substr(t3lib_div::getIndpEnv('TYPO3_REQUEST_URL'), strlen(t3lib_div::getIndpEnv('TYPO3_SITE_URL')));
 		}
-
-			// Internal and External target defaults
-		$GLOBALS['TSFE']->intTarget = ''.$GLOBALS['TSFE']->config['config']['intTarget'];
-		$GLOBALS['TSFE']->extTarget = ''.$GLOBALS['TSFE']->config['config']['extTarget'];
-		$GLOBALS['TSFE']->fileTarget = ''.$GLOBALS['TSFE']->config['config']['fileTarget'];
+		
+		// Internal and External target defaults
+		$GLOBALS['TSFE']->intTarget = '' . $GLOBALS['TSFE']->config['config']['intTarget'];
+		$GLOBALS['TSFE']->extTarget = '' . $GLOBALS['TSFE']->config['config']['extTarget'];
+		$GLOBALS['TSFE']->fileTarget = '' . $GLOBALS['TSFE']->config['config']['fileTarget'];
 		if ($GLOBALS['TSFE']->config['config']['spamProtectEmailAddresses'] === 'ascii') {
 			$GLOBALS['TSFE']->spamProtectEmailAddresses = 'ascii';
 		} else {
-			$GLOBALS['TSFE']->spamProtectEmailAddresses = t3lib_div::intInRange($GLOBALS['TSFE']->config['config']['spamProtectEmailAddresses'],-10,10,0);
+			$GLOBALS['TSFE']->spamProtectEmailAddresses = t3lib_div::intInRange($GLOBALS['TSFE']->config['config']['spamProtectEmailAddresses'], - 10, 10, 0);
 		}
-
+		
 		$GLOBALS['TSFE']->absRefPrefix = ($GLOBALS['TSFE']->config['config']['absRefPrefix'] ? trim($GLOBALS['TSFE']->config['config']['absRefPrefix']) : '');
-
-		if ($GLOBALS['TSFE']->type && $GLOBALS['TSFE']->config['config']['frameReloadIfNotInFrameset'])	{
-			$tdlLD = $GLOBALS['TSFE']->tmpl->linkData($GLOBALS['TSFE']->page,'_top',$GLOBALS['TSFE']->no_cache,'');
-			$GLOBALS['TSFE']->JSCode = 'if(!parent.'.trim($GLOBALS['TSFE']->sPre).' && !parent.view_frame) top.location.href="'.$GLOBALS['TSFE']->baseUrlWrap($tdlLD['totalURL']).'"';
+		
+		if ($GLOBALS['TSFE']->type && $GLOBALS['TSFE']->config['config']['frameReloadIfNotInFrameset']) {
+			$tdlLD = $GLOBALS['TSFE']->tmpl->linkData($GLOBALS['TSFE']->page, '_top', $GLOBALS['TSFE']->no_cache, '');
+			$GLOBALS['TSFE']->JSCode = 'if(!parent.' . trim($GLOBALS['TSFE']->sPre) . ' && !parent.view_frame) top.location.href="' . $GLOBALS['TSFE']->baseUrlWrap($tdlLD['totalURL']) . '"';
 		}
-		$GLOBALS['TSFE']->compensateFieldWidth = ''.$GLOBALS['TSFE']->config['config']['compensateFieldWidth'];
-		$GLOBALS['TSFE']->lockFilePath = ''.$GLOBALS['TSFE']->config['config']['lockFilePath'];
+		$GLOBALS['TSFE']->compensateFieldWidth = '' . $GLOBALS['TSFE']->config['config']['compensateFieldWidth'];
+		$GLOBALS['TSFE']->lockFilePath = '' . $GLOBALS['TSFE']->config['config']['lockFilePath'];
 		$GLOBALS['TSFE']->lockFilePath = $GLOBALS['TSFE']->lockFilePath ? $GLOBALS['TSFE']->lockFilePath : 'fileadmin/';
-		$GLOBALS['TYPO3_CONF_VARS']['GFX']['im_noScaleUp'] = isset($GLOBALS['TSFE']->config['config']['noScaleUp']) ? ''.$GLOBALS['TSFE']->config['config']['noScaleUp'] : $GLOBALS['TYPO3_CONF_VARS']['GFX']['im_noScaleUp'];
+		$GLOBALS['TYPO3_CONF_VARS']['GFX']['im_noScaleUp'] = isset($GLOBALS['TSFE']->config['config']['noScaleUp']) ? '' . $GLOBALS['TSFE']->config['config']['noScaleUp'] : $GLOBALS['TYPO3_CONF_VARS']['GFX']['im_noScaleUp'];
 		$GLOBALS['TSFE']->TYPO3_CONF_VARS['GFX']['im_noScaleUp'] = $GLOBALS['TYPO3_CONF_VARS']['GFX']['im_noScaleUp'];
-
-		$GLOBALS['TSFE']->ATagParams = trim($GLOBALS['TSFE']->config['config']['ATagParams']) ? ' '.trim($GLOBALS['TSFE']->config['config']['ATagParams']) : '';
-		if ($GLOBALS['TSFE']->config['config']['setJS_mouseOver'])	$GLOBALS['TSFE']->setJS('mouseOver');
-		if ($GLOBALS['TSFE']->config['config']['setJS_openPic'])	$GLOBALS['TSFE']->setJS('openPic');
-
-		$GLOBALS['TSFE']->sWordRegEx='';
+		
+		$GLOBALS['TSFE']->ATagParams = trim($GLOBALS['TSFE']->config['config']['ATagParams']) ? ' ' . trim($GLOBALS['TSFE']->config['config']['ATagParams']) : '';
+		if ($GLOBALS['TSFE']->config['config']['setJS_mouseOver'])
+			$GLOBALS['TSFE']->setJS('mouseOver');
+		if ($GLOBALS['TSFE']->config['config']['setJS_openPic'])
+			$GLOBALS['TSFE']->setJS('openPic');
+		
+		$GLOBALS['TSFE']->sWordRegEx = '';
 		$GLOBALS['TSFE']->sWordList = t3lib_div::_GP('sword_list');
-		if (is_array($GLOBALS['TSFE']->sWordList))	{
-			$standAlone = trim(''.$GLOBALS['TSFE']->config['config']['sword_standAlone']);
-			$noMixedCase = trim(''.$GLOBALS['TSFE']->config['config']['sword_noMixedCase']);
-
+		if (is_array($GLOBALS['TSFE']->sWordList)) {
+			$standAlone = trim('' . $GLOBALS['TSFE']->config['config']['sword_standAlone']);
+			$noMixedCase = trim('' . $GLOBALS['TSFE']->config['config']['sword_noMixedCase']);
+			
 			$space = ($standAlone) ? '[[:space:]]' : '';
 			foreach ($GLOBALS['TSFE']->sWordList as $val) {
 				if (trim($val)) {
-					if (!$noMixedCase) {
-						$GLOBALS['TSFE']->sWordRegEx.= $space.sql_regcase(quotemeta($val)).$space.'|';
+					if (! $noMixedCase) {
+						$GLOBALS['TSFE']->sWordRegEx .= $space . sql_regcase(quotemeta($val)) . $space . '|';
 					} else {
-						$GLOBALS['TSFE']->sWordRegEx.= $space.quotemeta($val).$space.'|';
+						$GLOBALS['TSFE']->sWordRegEx .= $space . quotemeta($val) . $space . '|';
 					}
 				}
 			}
-			$GLOBALS['TSFE']->sWordRegEx = preg_replace('/\|$/','',$GLOBALS['TSFE']->sWordRegEx);
+			$GLOBALS['TSFE']->sWordRegEx = preg_replace('/\|$/', '', $GLOBALS['TSFE']->sWordRegEx);
 		}
-
-			// linkVars
-		$linkVars = (string)$GLOBALS['TSFE']->config['config']['linkVars'];
-		if ($linkVars)	{
-			$linkVarArr = explode(',',$linkVars);
-
-			$GLOBALS['TSFE']->linkVars='';
+		
+		// linkVars
+		$linkVars = (string) $GLOBALS['TSFE']->config['config']['linkVars'];
+		if ($linkVars) {
+			$linkVarArr = explode(',', $linkVars);
+			
+			$GLOBALS['TSFE']->linkVars = '';
 			$GET = t3lib_div::_GET();
-
-			foreach ($linkVarArr as $val)	{
+			
+			foreach ($linkVarArr as $val) {
 				$val = trim($val);
-
-				if (preg_match('/^(.*)\((.+)\)$/',$val,$match))	{
+				
+				if (preg_match('/^(.*)\((.+)\)$/', $val, $match)) {
 					$val = trim($match[1]);
 					$test = trim($match[2]);
-				} else unset($test);
-
-				if ($val && isset($GET[$val]))	{
-					if (!is_array($GET[$val]))	{
+				} else
+					unset($test);
+				
+				if ($val && isset($GET[$val])) {
+					if (! is_array($GET[$val])) {
 						$tmpVal = rawurlencode($GET[$val]);
-
-						if ($test && !TSpagegen::isAllowedLinkVarValue($tmpVal,$test))	{
-							continue;	// Error: This value was not allowed for this key
+						
+						if ($test && ! TSpagegen::isAllowedLinkVarValue($tmpVal, $test)) {
+							continue; // Error: This value was not allowed for this key
 						}
-
-						$value = '&'.$val.'='.$tmpVal;
+						
+						$value = '&' . $val . '=' . $tmpVal;
 					} else {
-						if ($test && strcmp('array',$test))	{
-							continue;	// Error: This key must not be an array!
+						if ($test && strcmp('array', $test)) {
+							continue; // Error: This key must not be an array!
 						}
-						$value = t3lib_div::implodeArrayForUrl($val,$GET[$val]);
+						$value = t3lib_div::implodeArrayForUrl($val, $GET[$val]);
 					}
-				} else continue;
-
-				$GLOBALS['TSFE']->linkVars.= $value;
+				} else
+					continue;
+				
+				$GLOBALS['TSFE']->linkVars .= $value;
 			}
 			unset($GET);
 		} else {
-			$GLOBALS['TSFE']->linkVars='';
+			$GLOBALS['TSFE']->linkVars = '';
 		}
-
-			// Setting XHTML-doctype from doctype
-		if (!$GLOBALS['TSFE']->config['config']['xhtmlDoctype'])	{
+		
+		// Setting XHTML-doctype from doctype
+		if (! $GLOBALS['TSFE']->config['config']['xhtmlDoctype']) {
 			$GLOBALS['TSFE']->config['config']['xhtmlDoctype'] = $GLOBALS['TSFE']->config['config']['doctype'];
 		}
-
-		if ($GLOBALS['TSFE']->config['config']['xhtmlDoctype'])	{
+		
+		if ($GLOBALS['TSFE']->config['config']['xhtmlDoctype']) {
 			$GLOBALS['TSFE']->xhtmlDoctype = $GLOBALS['TSFE']->config['config']['xhtmlDoctype'];
-
-				// Checking XHTML-docytpe
-			switch((string)$GLOBALS['TSFE']->config['config']['xhtmlDoctype'])	{
-				case 'xhtml_trans':
-				case 'xhtml_strict':
-				case 'xhtml_frames':
+			
+			// Checking XHTML-docytpe
+			switch ((string) $GLOBALS['TSFE']->config['config']['xhtmlDoctype']) {
+				case 'xhtml_trans' :
+				case 'xhtml_strict' :
+				case 'xhtml_frames' :
 					$GLOBALS['TSFE']->xhtmlVersion = 100;
-				break;
-				case 'xhtml_basic':
+					break;
+				case 'xhtml_basic' :
 					$GLOBALS['TSFE']->xhtmlVersion = 105;
-				break;
-				case 'xhtml_11':
+					break;
+				case 'xhtml_11' :
 					$GLOBALS['TSFE']->xhtmlVersion = 110;
-				break;
-				case 'xhtml_2':
+					break;
+				case 'xhtml_2' :
 					$GLOBALS['TSFE']->xhtmlVersion = 200;
-				break;
-				default:
+					break;
+				default :
 					$GLOBALS['TSFE']->xhtmlDoctype = '';
 					$GLOBALS['TSFE']->xhtmlVersion = 0;
 			}
 		}
 	}
-
+	
 	/**
 	 * Returns an array with files to include. These files are the ones set up in TypoScript config.
 	 *
 	 * @return	array		Files to include. Paths are relative to PATH_site.
 	 */
 	public static function getIncFiles() {
-		$incFilesArray = array();
-			// Get files from config.includeLibrary
-		$includeLibrary = trim(''.$GLOBALS['TSFE']->config['config']['includeLibrary']);
-		if ($includeLibrary)	{
-			$incFile=$GLOBALS['TSFE']->tmpl->getFileName($includeLibrary);
-			if ($incFile)	{
+		$incFilesArray = array ();
+		// Get files from config.includeLibrary
+		$includeLibrary = trim('' . $GLOBALS['TSFE']->config['config']['includeLibrary']);
+		if ($includeLibrary) {
+			$incFile = $GLOBALS['TSFE']->tmpl->getFileName($includeLibrary);
+			if ($incFile) {
 				$incFilesArray[] = $incFile;
 			}
 		}
-
-		if (is_array($GLOBALS['TSFE']->pSetup['includeLibs.']))	{$incLibs=$GLOBALS['TSFE']->pSetup['includeLibs.'];} else {$incLibs=array();}
-		if (is_array($GLOBALS['TSFE']->tmpl->setup['includeLibs.']))	{$incLibs+=$GLOBALS['TSFE']->tmpl->setup['includeLibs.'];}	// toplevel 'includeLibs' is added to the PAGE.includeLibs. In that way, PAGE-libs get first priority, because if the key already exist, it's not altered. (Due to investigation by me)
-		if (count($incLibs))	{
+		
+		if (is_array($GLOBALS['TSFE']->pSetup['includeLibs.'])) {
+			$incLibs = $GLOBALS['TSFE']->pSetup['includeLibs.'];
+		} else {
+			$incLibs = array ();
+		}
+		if (is_array($GLOBALS['TSFE']->tmpl->setup['includeLibs.'])) {
+			$incLibs += $GLOBALS['TSFE']->tmpl->setup['includeLibs.'];
+		} // toplevel 'includeLibs' is added to the PAGE.includeLibs. In that way, PAGE-libs get first priority, because if the key already exist, it's not altered. (Due to investigation by me)
+		if (count($incLibs)) {
 			foreach ($incLibs as $theLib) {
-				if (!is_array($theLib) && $incFile=$GLOBALS['TSFE']->tmpl->getFileName($theLib))	{
+				if (! is_array($theLib) && $incFile = $GLOBALS['TSFE']->tmpl->getFileName($theLib)) {
 					$incFilesArray[] = $incFile;
 				}
 			}
 		}
-			// Include HTML mail library?
-		if ($GLOBALS['TSFE']->config['config']['incT3Lib_htmlmail'])	{
+		// Include HTML mail library?
+		if ($GLOBALS['TSFE']->config['config']['incT3Lib_htmlmail']) {
 			$incFilesArray[] = 't3lib/class.t3lib_htmlmail.php';
 		}
 		return $incFilesArray;
 	}
-
+	
 	/**
 	 * Processing JavaScript handlers
 	 *
 	 * @return	array		Array with a) a JavaScript section with event handlers and variables set and b) an array with attributes for the body tag.
 	 */
-	public static function JSeventFunctions()	{
-		$functions = array();
-		$setEvents = array();
-		$setBody = array();
-
-		foreach ($GLOBALS['TSFE']->JSeventFuncCalls as $event => $handlers)	{
-			if (count($handlers))	{
-				$functions[] = '	function T3_'.$event.'Wrapper(e)	{	'.implode('   ',$handlers).'	}';
-				$setEvents[] = '	document.'.$event.'=T3_'.$event.'Wrapper;';
-				if ($event == 'onload')	{
-					$setBody[]='onload="T3_onloadWrapper();"';	// dubiuos double setting breaks on some browser - do we need it?
+	public static function JSeventFunctions() {
+		$functions = array ();
+		$setEvents = array ();
+		$setBody = array ();
+		
+		foreach ($GLOBALS['TSFE']->JSeventFuncCalls as $event => $handlers) {
+			if (count($handlers)) {
+				$functions[] = '	function T3_' . $event . 'Wrapper(e)	{	' . implode('   ', $handlers) . '	}';
+				$setEvents[] = '	document.' . $event . '=T3_' . $event . 'Wrapper;';
+				if ($event == 'onload') {
+					$setBody[] = 'onload="T3_onloadWrapper();"'; // dubiuos double setting breaks on some browser - do we need it?
 				}
 			}
 		}
-
-		return array(count($functions)? implode(chr(10), $functions) . chr(10) . implode(chr(10), $setEvents) : '', $setBody);
+		
+		return array (count($functions) ? implode(chr(10), $functions) . chr(10) . implode(chr(10), $setEvents) : '', $setBody);
 	}
-
+	
 	/**
 	 * Rendering the page content
 	 *
 	 * @return	void
 	 */
 	public static function renderContent() {
-			// PAGE CONTENT
+		// PAGE CONTENT
 		$GLOBALS['TT']->incStackPointer();
 		$GLOBALS['TT']->push($GLOBALS['TSFE']->sPre, 'PAGE');
-			$pageContent = $GLOBALS['TSFE']->cObj->cObjGet($GLOBALS['TSFE']->pSetup);
+		$pageContent = $GLOBALS['TSFE']->cObj->cObjGet($GLOBALS['TSFE']->pSetup);
+		
+		if ($GLOBALS['TSFE']->pSetup['wrap']) {
+			$pageContent = $GLOBALS['TSFE']->cObj->wrap($pageContent, $GLOBALS['TSFE']->pSetup['wrap']);
+		}
+		if ($GLOBALS['TSFE']->pSetup['stdWrap.']) {
+			$pageContent = $GLOBALS['TSFE']->cObj->stdWrap($pageContent, $GLOBALS['TSFE']->pSetup['stdWrap.']);
+		}
+		
+		// PAGE HEADER (after content - maybe JS is inserted!
+		
 
-			if ($GLOBALS['TSFE']->pSetup['wrap'])	{$pageContent = $GLOBALS['TSFE']->cObj->wrap($pageContent, $GLOBALS['TSFE']->pSetup['wrap']);}
-			if ($GLOBALS['TSFE']->pSetup['stdWrap.'])	{$pageContent = $GLOBALS['TSFE']->cObj->stdWrap($pageContent, $GLOBALS['TSFE']->pSetup['stdWrap.']);}
-
-			// PAGE HEADER (after content - maybe JS is inserted!
-
-			// if 'disableAllHeaderCode' is set, all the header-code is discarded!
-		if ($GLOBALS['TSFE']->config['config']['disableAllHeaderCode'])	{
+		// if 'disableAllHeaderCode' is set, all the header-code is discarded!
+		if ($GLOBALS['TSFE']->config['config']['disableAllHeaderCode']) {
 			$GLOBALS['TSFE']->content = $pageContent;
 		} else {
 			TSpagegen::renderContentWithHeader($pageContent);
 		}
-		$GLOBALS['TT']->pull($GLOBALS['TT']->LR?$GLOBALS['TSFE']->content:'');
+		$GLOBALS['TT']->pull($GLOBALS['TT']->LR ? $GLOBALS['TSFE']->content : '');
 		$GLOBALS['TT']->decStackPointer();
 	}
-
+	
 	/**
 	 * Rendering normal HTML-page with header by wrapping the generated content ($pageContent) in body-tags and setting the header accordingly.
 	 *
@@ -338,135 +336,146 @@
 	 * @return	void
 	 */
 	public static function renderContentWithHeader($pageContent) {
+		
+		$GLOBALS['TSFE']->backPath = 'typo3/';
+		
+		if ($GLOBALS['TSFE']->config['config']['moveJsFromHeaderToFooter']) {
+			$GLOBALS['TSFE']->setMoveJsFromHeaderToFooter();
+		}
+		
+		if ($GLOBALS['TSFE']->config['config']['pageRenderTemplateFile']) {
+			$file = $GLOBALS['TSFE']->tmpl->getFileName($GLOBALS['TSFE']->config['config']['pageRenderTemplateFile']);
+			if ($file) {
+				$GLOBALS['TSFE']->setTemplateFile($file);
+			}
+		}
+		
 		$customContent = $GLOBALS['TSFE']->config['config']['headerComment'];
-		if (trim($customContent))	{
-			$customContent = chr(10).$customContent;
-		} else $customContent='';
-
-			// Setting charset:
+		if (trim($customContent)) {
+			$GLOBALS['TSFE']->addInlineComment($customContent);
+		}
+		
+		// Setting charset:
 		$theCharset = $GLOBALS['TSFE']->metaCharset;
-
-			// Reset the content variables:
-		$GLOBALS['TSFE']->content='';
-		$htmlTagAttributes = array();
+		
+		// Reset the content variables:
+		$GLOBALS['TSFE']->content = '';
+		$htmlTagAttributes = array ();
 		$htmlLang = $GLOBALS['TSFE']->config['config']['htmlTag_langKey'] ? $GLOBALS['TSFE']->config['config']['htmlTag_langKey'] : 'en';
-
-			// Set content direction: (More info: http://www.tau.ac.il/~danon/Hebrew/HTML_and_Hebrew.html)
-		if ($GLOBALS['TSFE']->config['config']['htmlTag_dir'])	{
+		
+		// Set content direction: (More info: http://www.tau.ac.il/~danon/Hebrew/HTML_and_Hebrew.html)
+		if ($GLOBALS['TSFE']->config['config']['htmlTag_dir']) {
 			$htmlTagAttributes['dir'] = htmlspecialchars($GLOBALS['TSFE']->config['config']['htmlTag_dir']);
 		}
-
-			// Setting document type:
-		$docTypeParts = array();
-			// Part 1: XML prologue
-		switch((string)$GLOBALS['TSFE']->config['config']['xmlprologue'])	{
-			case 'none':
-			break;
-			case 'xml_10':
-				$docTypeParts[]='<?xml version="1.0" encoding="'.$theCharset.'"?>';
-			break;
-			case 'xml_11':
-				$docTypeParts[]='<?xml version="1.1" encoding="'.$theCharset.'"?>';
-			break;
-			case '':
-				if ($GLOBALS['TSFE']->xhtmlVersion)	$docTypeParts[]='<?xml version="1.0" encoding="'.$theCharset.'"?>';
-			break;
-			default:
-				$docTypeParts[]=$GLOBALS['TSFE']->config['config']['xmlprologue'];
+		
+		// Setting document type:
+		$docTypeParts = array ();
+		// Part 1: XML prologue
+		switch ((string) $GLOBALS['TSFE']->config['config']['xmlprologue']) {
+			case 'none' :
+				break;
+			case 'xml_10' :
+				$docTypeParts[] = '<?xml version="1.0" encoding="' . $theCharset . '"?>';
+				break;
+			case 'xml_11' :
+				$docTypeParts[] = '<?xml version="1.1" encoding="' . $theCharset . '"?>';
+				break;
+			case '' :
+				if ($GLOBALS['TSFE']->xhtmlVersion)
+					$docTypeParts[] = '<?xml version="1.0" encoding="' . $theCharset . '"?>';
+				break;
+			default :
+				$docTypeParts[] = $GLOBALS['TSFE']->config['config']['xmlprologue'];
 		}
-			// Part 2: DTD
-		if ($GLOBALS['TSFE']->config['config']['doctype'])	{
-			switch((string)$GLOBALS['TSFE']->config['config']['doctype'])	{
-				case 'xhtml_trans':
-					$docTypeParts[]='<!DOCTYPE html
+		// Part 2: DTD
+		if ($GLOBALS['TSFE']->config['config']['doctype']) {
+			switch ((string) $GLOBALS['TSFE']->config['config']['doctype']) {
+				case 'xhtml_trans' :
+					$docTypeParts[] = '<!DOCTYPE html
      PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">';
-				break;
-				case 'xhtml_strict':
-					$docTypeParts[]='<!DOCTYPE html
+					break;
+				case 'xhtml_strict' :
+					$docTypeParts[] = '<!DOCTYPE html
      PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">';
-				break;
-				case 'xhtml_frames':
-					$docTypeParts[]='<!DOCTYPE html
+					break;
+				case 'xhtml_frames' :
+					$docTypeParts[] = '<!DOCTYPE html
      PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">';
-				break;
-				case 'xhtml_basic':
-					$docTypeParts[]='<!DOCTYPE html
+					break;
+				case 'xhtml_basic' :
+					$docTypeParts[] = '<!DOCTYPE html
     PUBLIC "-//W3C//DTD XHTML Basic 1.0//EN"
     "http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd">';
-				break;
-				case 'xhtml_11':
-					$docTypeParts[]='<!DOCTYPE html
+					break;
+				case 'xhtml_11' :
+					$docTypeParts[] = '<!DOCTYPE html
      PUBLIC "-//W3C//DTD XHTML 1.1//EN"
      "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">';
-				break;
-				case 'xhtml_2':
-					$docTypeParts[]='<!DOCTYPE html
+					break;
+				case 'xhtml_2' :
+					$docTypeParts[] = '<!DOCTYPE html
 	PUBLIC "-//W3C//DTD XHTML 2.0//EN"
 	"http://www.w3.org/TR/xhtml2/DTD/xhtml2.dtd">';
-				break;
-				case 'none':
-				break;
-				default:
+					break;
+				case 'none' :
+					break;
+				default :
 					$docTypeParts[] = $GLOBALS['TSFE']->config['config']['doctype'];
 			}
 		} else {
-			$docTypeParts[]='<!DOCTYPE html
+			$docTypeParts[] = '<!DOCTYPE html
 	PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">';
 		}
-
-		if ($GLOBALS['TSFE']->xhtmlVersion)	{
-
-				// Setting <html> tag attributes:
-	 		$htmlTagAttributes['xmlns'] = 'http://www.w3.org/1999/xhtml';
+		
+		if ($GLOBALS['TSFE']->xhtmlVersion) {
+			
+			// Setting <html> tag attributes:
+			$htmlTagAttributes['xmlns'] = 'http://www.w3.org/1999/xhtml';
 			$htmlTagAttributes['xml:lang'] = $htmlLang;
-			if ($GLOBALS['TSFE']->xhtmlVersion < 110)	{
-					$htmlTagAttributes['lang'] = $htmlLang;
+			if ($GLOBALS['TSFE']->xhtmlVersion < 110) {
+				$htmlTagAttributes['lang'] = $htmlLang;
 			}
 		}
-
-			// Swap XML and doctype order around (for MSIE / Opera standards compliance)
-		if ($GLOBALS['TSFE']->config['config']['doctypeSwitch'])	{
+		
+		// Swap XML and doctype order around (for MSIE / Opera standards compliance)
+		if ($GLOBALS['TSFE']->config['config']['doctypeSwitch']) {
 			$docTypeParts = array_reverse($docTypeParts);
 		}
-
-			// Adding doctype parts:
-		$GLOBALS['TSFE']->content.= count($docTypeParts) ? implode(chr(10),$docTypeParts).chr(10) : '';
-
-			// Begin header section:
-		if (strcmp($GLOBALS['TSFE']->config['config']['htmlTag_setParams'],'none'))	{
+		
+		// Adding doctype parts:
+		if (count($docTypeParts)) {
+			$GLOBALS['TSFE']->setXmlPrologAndDocType(implode(chr(10), $docTypeParts));
+		}
+		
+		// Begin header section:
+		if (strcmp($GLOBALS['TSFE']->config['config']['htmlTag_setParams'], 'none')) {
 			$_attr = $GLOBALS['TSFE']->config['config']['htmlTag_setParams'] ? $GLOBALS['TSFE']->config['config']['htmlTag_setParams'] : t3lib_div::implodeAttributes($htmlTagAttributes);
 		} else {
 			$_attr = '';
 		}
-		$GLOBALS['TSFE']->content.='<html'.($_attr ? ' '.$_attr : '').'>';
-
-			// Head tag:
+		$GLOBALS['TSFE']->setHtmlTag('<html' . ($_attr ? $_attr : '') . '>');
+		
+		// Head tag:
 		$headTag = $GLOBALS['TSFE']->pSetup['headTag'] ? $GLOBALS['TSFE']->pSetup['headTag'] : '<head>';
-		$GLOBALS['TSFE']->content.= chr(10).$headTag;
-
-			// Setting charset meta tag:
-		$GLOBALS['TSFE']->content.='
-	<meta http-equiv="Content-Type" content="text/html; charset='.$theCharset.'" />';
-
-		$GLOBALS['TSFE']->content.='
-
-<!-- '.($customContent?$customContent.chr(10):'').'
+		$GLOBALS['TSFE']->setHeadTag($headTag);
+		
+		// Setting charset meta tag:
+		$GLOBALS['TSFE']->setCharSet($theCharset);
+		
+		$GLOBALS['TSFE']->addInlineComment('
 	This website is powered by TYPO3 - inspiring people to share!
 	TYPO3 is a free open source Content Management Framework initially created by Kasper Skaarhoj and licensed under GNU/GPL.
 	TYPO3 is copyright 1998-2009 of Kasper Skaarhoj. Extensions are copyright of their respective owners.
 	Information and contribution at http://typo3.com/ and http://typo3.org/
--->
-';
-
-
+');
+		
 		if ($GLOBALS['TSFE']->baseUrl) {
-			$GLOBALS['TSFE']->content.='
-	<base href="'.htmlspecialchars($GLOBALS['TSFE']->baseUrl).'" />';
+			$GLOBALS['TSFE']->setBaseUrl($GLOBALS['TSFE']->baseUrl);
 		}
-
+		
 		if ($GLOBALS['TSFE']->pSetup['shortcutIcon']) {
 			$favIcon = t3lib_div::getIndpEnv('TYPO3_SITE_URL') . $GLOBALS['TSFE']->tmpl->getFileName($GLOBALS['TSFE']->pSetup['shortcutIcon']);
 			$iconMimeType = '';
@@ -474,133 +483,134 @@
 				if (($finfo = @finfo_open(FILEINFO_MIME))) {
 					$iconMimeType = ' type="' . finfo_file($finfo, $favIcon) . '"';
 					finfo_close($finfo);
+					$GLOBALS['TSFE']->setIconMimeType($iconMimeType);
 				}
 			}
-
-			$GLOBALS['TSFE']->content.= '
-	<link rel="shortcut icon" href="'.htmlspecialchars($favIcon).'"'.$iconMimeType.' />
-	<link rel="icon" href="'.htmlspecialchars($favIcon).'"'.$iconMimeType.' />';
+			$GLOBALS['TSFE']->setFavIcon($favIcon);
+		
 		}
-
-			// Including CSS files
-		if (is_array($GLOBALS['TSFE']->tmpl->setup['plugin.']))	{
-			$temp_styleLines=array();
-			foreach ($GLOBALS['TSFE']->tmpl->setup['plugin.'] as $key=>$iCSScode)	{
-				if (is_array($iCSScode) && $iCSScode['_CSS_DEFAULT_STYLE'])	{
-					$temp_styleLines[]='/* default styles for extension "'.substr($key,0,-1).'" */'.chr(10).$iCSScode['_CSS_DEFAULT_STYLE'];
+		
+		// Including CSS files
+		if (is_array($GLOBALS['TSFE']->tmpl->setup['plugin.'])) {
+			$temp_styleLines = array ();
+			foreach ($GLOBALS['TSFE']->tmpl->setup['plugin.'] as $key => $iCSScode) {
+				if (is_array($iCSScode) && $iCSScode['_CSS_DEFAULT_STYLE']) {
+					$temp_styleLines[] = '/* default styles for extension "' . substr($key, 0, - 1) . '" */' . chr(10) . $iCSScode['_CSS_DEFAULT_STYLE'];
 				}
 			}
-			if (count($temp_styleLines))	{
-				if ($GLOBALS['TSFE']->config['config']['inlineStyle2TempFile'])	{
-					$GLOBALS['TSFE']->content.=TSpagegen::inline2TempFile(implode(chr(10),$temp_styleLines),'css');
+			if (count($temp_styleLines)) {
+				if ($GLOBALS['TSFE']->config['config']['inlineStyle2TempFile']) {
+					$GLOBALS['TSFE']->addCssFile(TSpagegen::inline2TempFile(implode(chr(10), $temp_styleLines), 'css'));
 				} else {
-					$GLOBALS['TSFE']->content.='
-	<style type="text/css">
-		/*<![CDATA[*/
-	<!--
-	'.implode(chr(10),$temp_styleLines).'
-	-->
-		/*]]>*/
-	</style>';
+					$GLOBALS['TSFE']->addCssInlineBlock('TSFEinlineStyle', implode(chr(10), $temp_styleLines));
 				}
 			}
 		}
-
-		if ($GLOBALS['TSFE']->pSetup['stylesheet'])	{
+		
+		if ($GLOBALS['TSFE']->pSetup['stylesheet']) {
 			$ss = $GLOBALS['TSFE']->tmpl->getFileName($GLOBALS['TSFE']->pSetup['stylesheet']);
-			if ($ss)	{
-				$GLOBALS['TSFE']->content.='
-	<link rel="stylesheet" type="text/css" href="'.htmlspecialchars($ss).'" />';
+			if ($ss) {
+				$GLOBALS['TSFE']->addCssFile($ss);
 			}
 		}
-		if (is_array($GLOBALS['TSFE']->pSetup['includeCSS.']))	{
-			foreach ($GLOBALS['TSFE']->pSetup['includeCSS.'] as $key=>$iCSSfile)	{
-				if (!is_array($iCSSfile))	{
-					$ss=$GLOBALS['TSFE']->tmpl->getFileName($iCSSfile);
-					if ($ss)	{
-						if ($GLOBALS['TSFE']->pSetup['includeCSS.'][$key.'.']['import'])	{
-							if (substr($ss,0,1)!='/')	{	// To fix MSIE 6 that cannot handle these as relative paths (according to Ben v Ende)
-								$ss = t3lib_div::dirname(t3lib_div::getIndpEnv('SCRIPT_NAME')).'/'.$ss;
+		
+		/**********************************************************************/
+		/* includeCSS 
+		/* config.includeCSS {
+		/* 		
+		/* }
+		/**********************************************************************/
+		
+		if (is_array($GLOBALS['TSFE']->pSetup['includeCSS.'])) {
+			foreach ($GLOBALS['TSFE']->pSetup['includeCSS.'] as $key => $CSSfile) {
+				if (! is_array($CSSfile)) {
+					$ss = $GLOBALS['TSFE']->pSetup['includeCSS.'][$key . '.']['external'] ? $CSSfile : $GLOBALS['TSFE']->tmpl->getFileName($CSSfile);
+					if ($ss) {
+						if ($GLOBALS['TSFE']->pSetup['includeCSS.'][$key . '.']['import']) {
+							if (! $GLOBALS['TSFE']->pSetup['includeCSS.'][$key . '.']['external'] && substr($ss, 0, 1) != '/') { // To fix MSIE 6 that cannot handle these as relative paths (according to Ben v Ende)
+								$ss = t3lib_div::dirname(t3lib_div::getIndpEnv('SCRIPT_NAME')) . '/' . $ss;
 							}
-							$GLOBALS['TSFE']->content.='
-	<style type="text/css">
-	<!--
-	@import url("'.htmlspecialchars($ss).'") '.htmlspecialchars($GLOBALS['TSFE']->pSetup['includeCSS.'][$key.'.']['media']).';
-	-->
-	</style>
-							';
+							$GLOBALS['TSFE']->addCssInlineBlock(
+								'import_' . $key, 
+								'@import url("' . htmlspecialchars($ss) . '") ' . htmlspecialchars($GLOBALS['TSFE']->pSetup['includeCSS.'][$key . '.']['media']) . ';', 
+								$GLOBALS['TSFE']->pSetup['includeCSS.'][$key . '.']['compressed'] ? TRUE : FALSE, 
+								$GLOBALS['TSFE']->pSetup['includeCSS.'][$key . '.']['forceOnTop'] ? TRUE : FALSE, 
+								''
+							);
 						} else {
-							$GLOBALS['TSFE']->content.='
-	<link rel="'.($GLOBALS['TSFE']->pSetup['includeCSS.'][$key.'.']['alternate'] ? 'alternate stylesheet' : 'stylesheet').'" type="text/css" href="'.htmlspecialchars($ss).'"'.
-			($GLOBALS['TSFE']->pSetup['includeCSS.'][$key.'.']['title'] ? ' title="'.htmlspecialchars($GLOBALS['TSFE']->pSetup['includeCSS.'][$key.'.']['title']).'"' : '').
-			($GLOBALS['TSFE']->pSetup['includeCSS.'][$key.'.']['media'] ? ' media="'.htmlspecialchars($GLOBALS['TSFE']->pSetup['includeCSS.'][$key.'.']['media']).'"' : '').
-			' />';
+							$GLOBALS['TSFE']->addCssFile(
+								htmlspecialchars($ss), 
+								$GLOBALS['TSFE']->pSetup['includeCSS.'][$key . '.']['alternate'] ? 'alternate stylesheet' : 'stylesheet',
+								$GLOBALS['TSFE']->pSetup['includeCSS.'][$key . '.']['media'] ? $GLOBALS['TSFE']->pSetup['includeCSS.'][$key . '.']['media'] : 'screen', 
+								$GLOBALS['TSFE']->pSetup['includeCSS.'][$key . '.']['title'] ? $GLOBALS['TSFE']->pSetup['includeCSS.'][$key . '.']['title'] : '', 
+								$GLOBALS['TSFE']->pSetup['includeCSS.'][$key . '.']['compressed'] ? TRUE : FALSE, 
+								$GLOBALS['TSFE']->pSetup['includeCSS.'][$key . '.']['forceOnTop'] ? TRUE : FALSE, 
+								$GLOBALS['TSFE']->pSetup['includeCSS.'][$key . '.']['allWrap']);
+						
 						}
 					}
 				}
 			}
 		}
-
-			// Stylesheets
-		$style='';
-		$style.=trim($GLOBALS['TSFE']->pSetup['CSS_inlineStyle']).chr(10);
-
-		if ($GLOBALS['TSFE']->pSetup['insertClassesFromRTE'])	{
+		
+		// Stylesheets
+		$style = '';
+		if ($GLOBALS['TSFE']->pSetup['insertClassesFromRTE']) {
 			$pageTSConfig = $GLOBALS['TSFE']->getPagesTSconfig();
 			$RTEclasses = $pageTSConfig['RTE.']['classes.'];
-			if (is_array($RTEclasses))	{
-				foreach ($RTEclasses as $RTEclassName=>$RTEvalueArray)	{
-					if ($RTEvalueArray['value'])	{
-						$style.='
-.'.substr($RTEclassName,0,-1).' {'.$RTEvalueArray['value'].'}';
+			if (is_array($RTEclasses)) {
+				foreach ($RTEclasses as $RTEclassName => $RTEvalueArray) {
+					if ($RTEvalueArray['value']) {
+						$style .= '
+.' . substr($RTEclassName, 0, - 1) . ' {' . $RTEvalueArray['value'] . '}';
 					}
 				}
 			}
-
-			if ($GLOBALS['TSFE']->pSetup['insertClassesFromRTE.']['add_mainStyleOverrideDefs'] && is_array($pageTSConfig['RTE.']['default.']['mainStyleOverride_add.']))	{
-				$mSOa_tList = t3lib_div::trimExplode(',',strtoupper($GLOBALS['TSFE']->pSetup['insertClassesFromRTE.']['add_mainStyleOverrideDefs']),1);
-				foreach ($pageTSConfig['RTE.']['default.']['mainStyleOverride_add.'] as $mSOa_key=>$mSOa_value)	{
-					if (!is_array($mSOa_value) && (in_array('*',$mSOa_tList)||in_array($mSOa_key,$mSOa_tList)))	{
-						$style.='
-'.$mSOa_key.' {'.$mSOa_value.'}';
+			
+			if ($GLOBALS['TSFE']->pSetup['insertClassesFromRTE.']['add_mainStyleOverrideDefs'] && is_array($pageTSConfig['RTE.']['default.']['mainStyleOverride_add.'])) {
+				$mSOa_tList = t3lib_div::trimExplode(',', strtoupper($GLOBALS['TSFE']->pSetup['insertClassesFromRTE.']['add_mainStyleOverrideDefs']), 1);
+				foreach ($pageTSConfig['RTE.']['default.']['mainStyleOverride_add.'] as $mSOa_key => $mSOa_value) {
+					if (! is_array($mSOa_value) && (in_array('*', $mSOa_tList) || in_array($mSOa_key, $mSOa_tList))) {
+						$style .= '
+' . $mSOa_key . ' {' . $mSOa_value . '}';
 					}
 				}
 			}
 		}
-
-			// Setting body tag margins in CSS:
-		if (isset($GLOBALS['TSFE']->pSetup['bodyTagMargins']) && $GLOBALS['TSFE']->pSetup['bodyTagMargins.']['useCSS'])	{
+		
+		// Setting body tag margins in CSS:
+		if (isset($GLOBALS['TSFE']->pSetup['bodyTagMargins']) && $GLOBALS['TSFE']->pSetup['bodyTagMargins.']['useCSS']) {
 			$margins = intval($GLOBALS['TSFE']->pSetup['bodyTagMargins']);
-			$style.='
-	BODY {margin: '.$margins.'px '.$margins.'px '.$margins.'px '.$margins.'px;}';
+			$style .= '
+	BODY {margin: ' . $margins . 'px ' . $margins . 'px ' . $margins . 'px ' . $margins . 'px;}';
 		}
-
-		if ($GLOBALS['TSFE']->pSetup['noLinkUnderline'])	{
+		
+		if ($GLOBALS['TSFE']->pSetup['noLinkUnderline']) {
 			$GLOBALS['TSFE']->logDeprecatedTyposcript('config.noLinkUnderline');
-			$style.='
+			$style .= '
 	A:link {text-decoration: none}
 	A:visited {text-decoration: none}
 	A:active {text-decoration: none}';
 		}
-		if (trim($GLOBALS['TSFE']->pSetup['hover']))	{
+		if (trim($GLOBALS['TSFE']->pSetup['hover'])) {
 			$GLOBALS['TSFE']->logDeprecatedTyposcript('config.hover');
-			$style.='
-	A:hover {color: '.trim($GLOBALS['TSFE']->pSetup['hover']).';}';
+			$style .= '
+	A:hover {color: ' . trim($GLOBALS['TSFE']->pSetup['hover']) . ';}';
 		}
-		if (trim($GLOBALS['TSFE']->pSetup['hoverStyle']))	{
+		if (trim($GLOBALS['TSFE']->pSetup['hoverStyle'])) {
 			$GLOBALS['TSFE']->logDeprecatedTyposcript('config.hoverStyle');
-			$style.='
-	A:hover {'.trim($GLOBALS['TSFE']->pSetup['hoverStyle']).'}';
+			$style .= '
+	A:hover {' . trim($GLOBALS['TSFE']->pSetup['hoverStyle']) . '}';
 		}
-		if ($GLOBALS['TSFE']->pSetup['smallFormFields'])	{
+		if ($GLOBALS['TSFE']->pSetup['smallFormFields']) {
 			$GLOBALS['TSFE']->logDeprecatedTyposcript('config.smallFormFields');
-			$style.='
+			$style .= '
 	SELECT {  font-family: Verdana, Arial, Helvetica; font-size: 10px }
 	TEXTAREA  {  font-family: Verdana, Arial, Helvetica; font-size: 10px}
 	INPUT   {  font-family: Verdana, Arial, Helvetica; font-size: 10px }';
 		}
-		if ($GLOBALS['TSFE']->pSetup['adminPanelStyles'])	{
-			$style.='
+		if ($GLOBALS['TSFE']->pSetup['adminPanelStyles']) {
+			$style .= '
 
 	/* Default styles for the Admin Panel */
 	TABLE.typo3-adminPanel { border: 1px solid black; background-color: #F6F2E6; }
@@ -613,103 +623,197 @@
 	TABLE.typo3-editPanel TD { border: 0px; }
 			';
 		}
-
-		if (trim($style))	{
-			if ($GLOBALS['TSFE']->config['config']['inlineStyle2TempFile'])	{
-				$GLOBALS['TSFE']->content.=TSpagegen::inline2TempFile($style, 'css');
+		// CSS_inlineStyle from TS
+		$style .= trim($GLOBALS['TSFE']->pSetup['CSS_inlineStyle']);
+		$style .= $GLOBALS['TSFE']->cObj->cObjGet($GLOBALS['TSFE']->pSetup['cssInline.'], 'cssInline.');
+		
+		if (trim($style)) {
+			if ($GLOBALS['TSFE']->config['config']['inlineStyle2TempFile']) {
+				$GLOBALS['TSFE']->addCssFile(TSpagegen::inline2TempFile($style, 'css'));
 			} else {
-				$GLOBALS['TSFE']->content.='
-	<style type="text/css">
-		/*<![CDATA[*/
-	<!--'.$style.'
-	-->
-		/*]]>*/
-	</style>';
+				$GLOBALS['TSFE']->addCssInlineBlock('additionalTSFEInlineStyle', $style);
 			}
 		}
-
-			// JavaScript files
-		if (is_array($GLOBALS['TSFE']->pSetup['includeJS.']))	{
-			foreach ($GLOBALS['TSFE']->pSetup['includeJS.'] as $key=>$JSfile)	{
-				if (!is_array($JSfile))	{
-					$ss = $GLOBALS['TSFE']->tmpl->getFileName($JSfile);
-					if ($ss)	{
-						$type = $GLOBALS['TSFE']->pSetup['includeJS.'][$key.'.']['type'];
-						if (!$type)	$type = 'text/javascript';
-
-						$GLOBALS['TSFE']->content.='
-	<script src="' . htmlspecialchars($GLOBALS['TSFE']->absRefPrefix . $ss) . '" type="' . htmlspecialchars($type) . '"></script>';
+		
+		// Javascript Libraries
+		if (is_array($GLOBALS['TSFE']->pSetup['javascriptLibs.'])) {
+			if ($GLOBALS['TSFE']->pSetup['javascriptLibs.']['Prototype']) {
+				$GLOBALS['TSFE']->loadPrototype();
+			}
+			if ($GLOBALS['TSFE']->pSetup['javascriptLibs.']['Scriptaculous']) {
+				$modules = $GLOBALS['TSFE']->pSetup['javascriptLibs.']['Scriptaculous.']['modules'] ? $GLOBALS['TSFE']->pSetup['javascriptLibs.']['Scriptaculous.']['modules'] : '';
+				$GLOBALS['TSFE']->loadScriptaculous($modules);
+			}
+			if ($GLOBALS['TSFE']->pSetup['javascriptLibs.']['ExtCore']) {
+				$GLOBALS['TSFE']->loadExtCore();
+				if ($GLOBALS['TSFE']->pSetup['javascriptLibs.']['ExtCore.']['debug']) {
+					$GLOBALS['TSFE']->enableExtCoreDebug();
+				}
+			}
+			if ($GLOBALS['TSFE']->pSetup['javascriptLibs.']['ExtJs']) {
+				$css = $GLOBALS['TSFE']->pSetup['javascriptLibs.']['ExtJs.']['css'] ? TRUE : FALSE;
+				$theme = $GLOBALS['TSFE']->pSetup['javascriptLibs.']['ExtJs.']['theme'] ? TRUE : FALSE;
+				$adapter = $GLOBALS['TSFE']->pSetup['javascriptLibs.']['ExtJs.']['adapter'] ? $GLOBALS['TSFE']->pSetup['javascriptLibs.']['ExtJs.']['adapter'] : '';
+				$GLOBALS['TSFE']->loadExtJs($css, $theme, $adapter);
+				if ($GLOBALS['TSFE']->pSetup['javascriptLibs.']['ExtJs.']['debug']) {
+					$GLOBALS['TSFE']->enableExtJsDebug();
+				}
+				if ($GLOBALS['TSFE']->pSetup['javascriptLibs.']['ExtJs.']['quickTips']) {
+					$GLOBALS['TSFE']->enableExtJSQuickTips();
+				}
+			}
+		}
+		
+		// JavaScript library files
+		if (is_array($GLOBALS['TSFE']->pSetup['includeJSlibs.'])) {
+			foreach ($GLOBALS['TSFE']->pSetup['includeJSlibs.'] as $key => $JSfile) {
+				$ss = $GLOBALS['TSFE']->pSetup['includeJSlibs.'][$key . '.']['external'] ? $JSfile : $GLOBALS['TSFE']->tmpl->getFileName($JSfile);
+				if ($ss) {
+					$type = $GLOBALS['TSFE']->pSetup['includeJSlibs.'][$key . '.']['type'];
+					if (! $type) {
+						$type = 'text/javascript';
 					}
+					$GLOBALS['TSFE']->addJsLibrary(
+						htmlspecialchars($key), 
+						htmlspecialchars($GLOBALS['TSFE']->absRefPrefix . $ss), 
+						htmlspecialchars($type), 
+						$GLOBALS['TSFE']->pSetup['includeJSlibs.'][$key . '.']['compressed'] ? TRUE : FALSE, 
+						$GLOBALS['TSFE']->pSetup['includeJSlibs.'][$key . '.']['forceOnTop'] ? TRUE : FALSE,
+						$GLOBALS['TSFE']->pSetup['includeJSlibs.'][$key . '.']['allWrap']
+					);
 				}
+			
 			}
 		}
-
-
-
-
-
-			// Headerdata
-		if (is_array($GLOBALS['TSFE']->pSetup['headerData.']))	{
-			$GLOBALS['TSFE']->content.= chr(10).$GLOBALS['TSFE']->cObj->cObjGet($GLOBALS['TSFE']->pSetup['headerData.'],'headerData.');
+		
+		if (is_array($GLOBALS['TSFE']->pSetup['includeJSFooterlibs.'])) {
+			foreach ($GLOBALS['TSFE']->pSetup['includeJSFooterlibs.'] as $key => $JSfile) {
+				$ss = $GLOBALS['TSFE']->pSetup['includeJSFooterlibs.'][$key . '.']['external'] ? $JSfile : $GLOBALS['TSFE']->tmpl->getFileName($JSfile);
+				if ($ss) {
+					$type = $GLOBALS['TSFE']->pSetup['includeJSFooterlibs.'][$key . '.']['type'];
+					if (! $type) {
+						$type = 'text/javascript';
+					}
+					$GLOBALS['TSFE']->addJsFooterLibrary(
+						htmlspecialchars($key), 
+						htmlspecialchars($GLOBALS['TSFE']->absRefPrefix . $ss), 
+						htmlspecialchars($type), 
+						$GLOBALS['TSFE']->pSetup['includeJSFooterlibs.'][$key . '.']['compressed'] ? TRUE : FALSE, 
+						$GLOBALS['TSFE']->pSetup['includeJSFooterlibs.'][$key . '.']['forceOnTop'] ? TRUE : FALSE,
+						$GLOBALS['TSFE']->pSetup['includeJSFooterlibs.'][$key . '.']['allWrap']
+					);
+				}
+			
+			}
 		}
-
-			// Title
-		$titleTagContent = $GLOBALS['TSFE']->tmpl->printTitle(
-			$GLOBALS['TSFE']->altPageTitle?$GLOBALS['TSFE']->altPageTitle:$GLOBALS['TSFE']->page['title'],
-			$GLOBALS['TSFE']->config['config']['noPageTitle'],
-			$GLOBALS['TSFE']->config['config']['pageTitleFirst']
-		);
-		if ($GLOBALS['TSFE']->config['config']['titleTagFunction'])	{
-			$titleTagContent = $GLOBALS['TSFE']->cObj->callUserFunction($GLOBALS['TSFE']->config['config']['titleTagFunction'], array(), $titleTagContent);
+		
+		// JavaScript files
+		if (is_array($GLOBALS['TSFE']->pSetup['includeJS.'])) {
+			foreach ($GLOBALS['TSFE']->pSetup['includeJS.'] as $key => $JSfile) {
+				if (!is_array($JSfile)) { 
+					$ss = $GLOBALS['TSFE']->pSetup['includeJS.'][$key . '.']['external'] ? $JSfile : $GLOBALS['TSFE']->tmpl->getFileName($JSfile);
+					if ($ss) {
+						$type = $GLOBALS['TSFE']->pSetup['includeJS.'][$key . '.']['type'];
+						if (! $type) {
+							$type = 'text/javascript';
+						}
+						$GLOBALS['TSFE']->addJsFile(
+							htmlspecialchars($GLOBALS['TSFE']->absRefPrefix . $ss), 
+							htmlspecialchars($type), 
+							$GLOBALS['TSFE']->pSetup['includeJS.'][$key . '.']['compressed'] ? TRUE : FALSE, 
+							$GLOBALS['TSFE']->pSetup['includeJS.'][$key . '.']['forceOnTop'] ? TRUE : FALSE, 
+							$GLOBALS['TSFE']->pSetup['includeJS.'][$key . '.']['allWrap']
+						);
+					}
+				}
+			}
 		}
-
-		if (strlen($titleTagContent) && intval($GLOBALS['TSFE']->config['config']['noPageTitle'])!==2)	{
-			$GLOBALS['TSFE']->content.='
-	<title>'.htmlspecialchars($titleTagContent).'</title>';
+		
+		if (is_array($GLOBALS['TSFE']->pSetup['includeFooterJS.'])) {
+			foreach ($GLOBALS['TSFE']->pSetup['includeFooterJS.'] as $key => $JSfile) {
+				if (!is_array($JSfile)) { 
+					$ss = $GLOBALS['TSFE']->pSetup['includeFooterJS.'][$key . '.']['external'] ? $JSfile : $GLOBALS['TSFE']->tmpl->getFileName($JSfile);
+					if ($ss) {
+						$type = $GLOBALS['TSFE']->pSetup['includeFooterJS.'][$key . '.']['type'];
+						if (! $type) {
+							$type = 'text/javascript';
+						}
+						$GLOBALS['TSFE']->addJsFooterFile(
+							htmlspecialchars($GLOBALS['TSFE']->absRefPrefix . $ss), 
+							htmlspecialchars($type), 
+							$GLOBALS['TSFE']->pSetup['includeFooterJS.'][$key . '.']['compressed'] ? TRUE : FALSE, 
+							$GLOBALS['TSFE']->pSetup['includeJS.'][$key . '.']['forceOnTop'] ? TRUE : FALSE, 
+							$GLOBALS['TSFE']->pSetup['includeJS.'][$key . '.']['allWrap']
+						);
+					}
+				}
+			}
 		}
-		$GLOBALS['TSFE']->content.='
-	<meta name="generator" content="TYPO3 '.TYPO3_branch.' CMS" />';
-
-		$conf=$GLOBALS['TSFE']->pSetup['meta.'];
-		if (is_array($conf))	{
+		
+		// Headerdata
+		if (is_array($GLOBALS['TSFE']->pSetup['headerData.'])) {
+			$GLOBALS['TSFE']->addHeaderData($GLOBALS['TSFE']->cObj->cObjGet($GLOBALS['TSFE']->pSetup['headerData.'], 'headerData.'));
+		}
+		
+		// Footerdata
+		if (is_array($GLOBALS['TSFE']->pSetup['footerData.'])) {
+			$GLOBALS['TSFE']->addFooterData($GLOBALS['TSFE']->cObj->cObjGet($GLOBALS['TSFE']->pSetup['footerData.'], 'footerData.'));
+		}
+		
+		// Title
+		$titleTagContent = $GLOBALS['TSFE']->tmpl->printTitle($GLOBALS['TSFE']->altPageTitle ? $GLOBALS['TSFE']->altPageTitle : $GLOBALS['TSFE']->page['title'], $GLOBALS['TSFE']->config['config']['noPageTitle'], $GLOBALS['TSFE']->config['config']['pageTitleFirst']);
+		if ($GLOBALS['TSFE']->config['config']['titleTagFunction']) {
+			$titleTagContent = $GLOBALS['TSFE']->cObj->callUserFunction($GLOBALS['TSFE']->config['config']['titleTagFunction'], array (), $titleTagContent);
+		}
+		
+		if (strlen($titleTagContent) && intval($GLOBALS['TSFE']->config['config']['noPageTitle']) !== 2) {
+			$GLOBALS['TSFE']->setTitle($titleTagContent);
+		}
+		
+		$GLOBALS['TSFE']->addMetaTag('<meta name="generator" content="TYPO3 ' . TYPO3_branch . ' CMS" />');
+		
+		$conf = $GLOBALS['TSFE']->pSetup['meta.'];
+		if (is_array($conf)) {
 			foreach ($conf as $theKey => $theValue) {
-				if (!strstr($theKey,'.') || !isset($conf[substr($theKey,0,-1)]))	{		// Only if 1) the property is set but not the value itself, 2) the value and/or any property
-					if (strstr($theKey,'.'))	{
-						$theKey = substr($theKey,0,-1);
+				if (! strstr($theKey, '.') || ! isset($conf[substr($theKey, 0, - 1)])) { // Only if 1) the property is set but not the value itself, 2) the value and/or any property
+					if (strstr($theKey, '.')) {
+						$theKey = substr($theKey, 0, - 1);
 					}
-					$val = $GLOBALS['TSFE']->cObj->stdWrap($conf[$theKey],$conf[$theKey.'.']);
+					$val = $GLOBALS['TSFE']->cObj->stdWrap($conf[$theKey], $conf[$theKey . '.']);
 					$key = $theKey;
-					if (trim($val))	{
-						$a='name';
-						if (strtolower($key)=='refresh')	{$a='http-equiv';}
-						$GLOBALS['TSFE']->content.= '
-	<meta '.$a.'="'.$key.'" content="'.htmlspecialchars(trim($val)).'" />';
+					if (trim($val)) {
+						$a = 'name';
+						if (strtolower($key) == 'refresh') {
+							$a = 'http-equiv';
+						}
+						$GLOBALS['TSFE']->addMetaTag('<meta ' . $a . '="' . $key . '" content="' . htmlspecialchars(trim($val)) . '" />');
 					}
 				}
 			}
 		}
-
+		
 		unset($GLOBALS['TSFE']->additionalHeaderData['JSCode']);
 		unset($GLOBALS['TSFE']->additionalHeaderData['JSImgCode']);
-
-		if (is_array($GLOBALS['TSFE']->config['INTincScript']))	{
-				// Storing the JSCode and JSImgCode vars...
+		
+		if (is_array($GLOBALS['TSFE']->config['INTincScript'])) {
+			// Storing the JSCode and JSImgCode vars...
 			$GLOBALS['TSFE']->additionalHeaderData['JSCode'] = $GLOBALS['TSFE']->JSCode;
 			$GLOBALS['TSFE']->additionalHeaderData['JSImgCode'] = $GLOBALS['TSFE']->JSImgCode;
 			$GLOBALS['TSFE']->config['INTincScript_ext']['divKey'] = $GLOBALS['TSFE']->uniqueHash();
-			$GLOBALS['TSFE']->config['INTincScript_ext']['additionalHeaderData'] = $GLOBALS['TSFE']->additionalHeaderData;	// Storing the header-data array
-			$GLOBALS['TSFE']->config['INTincScript_ext']['additionalJavaScript'] = $GLOBALS['TSFE']->additionalJavaScript;	// Storing the JS-data array
-			$GLOBALS['TSFE']->config['INTincScript_ext']['additionalCSS'] = $GLOBALS['TSFE']->additionalCSS;	// Storing the Style-data array
+			$GLOBALS['TSFE']->config['INTincScript_ext']['additionalHeaderData'] = $GLOBALS['TSFE']->additionalHeaderData; // Storing the header-data array
+			$GLOBALS['TSFE']->config['INTincScript_ext']['additionalJavaScript'] = $GLOBALS['TSFE']->additionalJavaScript; // Storing the JS-data array
+			$GLOBALS['TSFE']->config['INTincScript_ext']['additionalCSS'] = $GLOBALS['TSFE']->additionalCSS; // Storing the Style-data array
+			
 
-			$GLOBALS['TSFE']->additionalHeaderData = array('<!--HD_'.$GLOBALS['TSFE']->config['INTincScript_ext']['divKey'].'-->');	// Clearing the array
-			$GLOBALS['TSFE']->divSection.= '<!--TDS_'.$GLOBALS['TSFE']->config['INTincScript_ext']['divKey'].'-->';
+			$GLOBALS['TSFE']->additionalHeaderData = array ('<!--HD_' . $GLOBALS['TSFE']->config['INTincScript_ext']['divKey'] . '-->'); // Clearing the array
+			$GLOBALS['TSFE']->divSection .= '<!--TDS_' . $GLOBALS['TSFE']->config['INTincScript_ext']['divKey'] . '-->';
 		} else {
 			$GLOBALS['TSFE']->INTincScript_loadJSCode();
 		}
 		$JSef = TSpagegen::JSeventFunctions();
-
-			// Adding default Java Script:
-		$_scriptCode = '
+		
+		// Adding default Java Script:
+		$scriptJsCode = '
 		var browserName = navigator.appName;
 		var browserVer = parseInt(navigator.appVersion);
 		var version = "";
@@ -720,9 +824,9 @@
 			if (msie4)	{theObject.blur();}
 		}
 		' . $JSef[0];
-
+		
 		if ($GLOBALS['TSFE']->spamProtectEmailAddresses && $GLOBALS['TSFE']->spamProtectEmailAddresses !== 'ascii') {
-			$_scriptCode.= '
+			$scriptJsCode .= '
 			// decrypt helper function
 		function decryptCharcode(n,start,end,offset)	{
 			n = n + offset;
@@ -753,134 +857,178 @@
 		}
 			// decrypt spam-protected emails
 		function linkTo_UnCryptMailto(s)	{
-			location.href = decryptString(s,'.($GLOBALS['TSFE']->spamProtectEmailAddresses*-1).');
+			location.href = decryptString(s,' . ($GLOBALS['TSFE']->spamProtectEmailAddresses * - 1) . ');
 		}
 		';
 		}
-
-			//add inline JS
-		$_inlineJS = '';
-			// defined in TS with page.inlineJS
-		if (is_array($GLOBALS['TSFE']->pSetup['inlineJS.']))	{
-			$GLOBALS['TSFE']->inlineJS[]= $GLOBALS['TSFE']->cObj->cObjGet($GLOBALS['TSFE']->pSetup['inlineJS.'],'inlineJS.');
-		}
-			// defined in php
-		if(is_array($GLOBALS['TSFE']->inlineJS)) {
-			foreach($GLOBALS['TSFE']->inlineJS as $key=>$val) {
-				if(!is_array($val)) {
-					$_inlineJS .= chr(10).$val.chr(10);
+		
+		//add inline JS
+		$inlineJS = '';
+		
+		// defined in php
+		if (is_array($GLOBALS['TSFE']->inlineJS)) {
+			foreach ($GLOBALS['TSFE']->inlineJS as $key => $val) {
+				if (! is_array($val)) {
+					$inlineJS .= chr(10) . $val . chr(10);
 				}
 			}
 		}
-
-			// Should minify?
+		
+		// defined in TS with page.inlineJS
+		// Javascript inline code
+		$inline = $GLOBALS['TSFE']->cObj->cObjGet($GLOBALS['TSFE']->pSetup['jsInline.'], 'jsInline.');
+		if ($inline) {
+			$inlineJS .= chr(10) . $inline . chr(10);
+		}
+		
+		// Javascript inline code for Footer
+		$inlineFooterJs = $GLOBALS['TSFE']->cObj->cObjGet($GLOBALS['TSFE']->pSetup['jsFooterInline.'], 'jsFooterInline.');
+		
+		// Should minify?
 		if ($GLOBALS['TSFE']->config['config']['minifyJS']) {
+			$GLOBALS['TSFE']->setCompressJavascript();
 			$minifyErrorScript = $minifyErrorInline = '';
-			$_scriptCode = t3lib_div::minifyJavaScript($_scriptCode,$minifyErrorScript);
+			$scriptJsCode = t3lib_div::minifyJavaScript($scriptJsCode, $minifyErrorScript);
 			if ($minifyErrorScript) {
 				$GLOBALS['TT']->setTSlogMessage($minifyErrorScript, 3);
 			}
-			if ($_inlineJS) {
-				$_inlineJS = t3lib_div::minifyJavaScript($_inlineJS,$minifyErrorInline);
+			if ($inlineJS) {
+				$inlineJS = t3lib_div::minifyJavaScript($inlineJS, $minifyErrorInline);
 				if ($minifyErrorInline) {
 					$GLOBALS['TT']->setTSlogMessage($minifyErrorInline, 3);
 				}
 			}
+			if ($inlineFooterJs) {
+				$inlineFooterJs = t3lib_div::minifyJavaScript($inlineFooterJs, $minifyErrorInline);
+				if ($minifyErrorInline) {
+					$GLOBALS['TT']->setTSlogMessage($minifyErrorInline, 3);
+				}
+			}
+		
 		}
-
-		if (!$GLOBALS['TSFE']->config['config']['removeDefaultJS']) {
-				// inlude default and inlineJS
-			$GLOBALS['TSFE']->content.='
-	<script type="text/javascript">
-		/*<![CDATA[*/
-	<!--'.$_scriptCode.$_inlineJS.'
-	// -->
-		/*]]>*/
-	</script>';
-		} elseif ($GLOBALS['TSFE']->config['config']['removeDefaultJS']==='external')	{
-				// put default and inlineJS in external file
-			$GLOBALS['TSFE']->content.= TSpagegen::inline2TempFile($_scriptCode.$_inlineJS, 'js');
-		} elseif ($_inlineJS) {
-				// include only inlineJS
-			$GLOBALS['TSFE']->content.='
-	<script type="text/javascript">
-		/*<![CDATA[*/
-	<!--'.$_inlineJS.'
-	// -->
-		/*]]>*/
-	</script>';
+		
+		if (! $GLOBALS['TSFE']->config['config']['removeDefaultJS']) {
+			// inlude default and inlineJS
+			if ($scriptJsCode) {
+				$GLOBALS['TSFE']->addJsInlineCode('_scriptCode', $scriptJsCode, $GLOBALS['TSFE']->config['config']['minifyJS']);
+			}
+			if ($inlineJS) {
+				$GLOBALS['TSFE']->addJsInlineCode('TS_inlineJS', $inlineJS, $GLOBALS['TSFE']->config['config']['minifyJS']);
+			}
+			if ($inlineFooterJs) {
+				$GLOBALS['TSFE']->addJsFooterInlineCode('TS_inlineFooter', $inlineFooterJs, $GLOBALS['TSFE']->config['config']['minifyJS']);
+			}
+		} elseif ($GLOBALS['TSFE']->config['config']['removeDefaultJS'] === 'external') {
+			// put default and inlineJS in external file
+			$GLOBALS['TSFE']->addJsFile(TSpagegen::inline2TempFile($scriptJsCode . $inlineJS, 'js'), 'text/javascript', $GLOBALS['TSFE']->config['config']['minifyJS']);
+			if ($inlineFooterJs) {
+				$GLOBALS['TSFE']->addJsFooterFile(TSpagegen::inline2TempFile($inlineFooterJs, 'js'), 'text/javascript', $GLOBALS['TSFE']->config['config']['minifyJS']);
+			}
+		} else {
+			// include only inlineJS
+			if ($inlineJS) {
+				$GLOBALS['TSFE']->addJsInlineCode('TS_inlineJS', $inlineJS, $GLOBALS['TSFE']->config['config']['minifyJS']);
+			}
+			if ($inlineFooterJs) {
+				$GLOBALS['TSFE']->addJsFooterInlineCode('TS_inlineFooter', $inlineFooterJs, $GLOBALS['TSFE']->config['config']['minifyJS']);
+			}
 		}
+		
+			// ExtJS specific code
+		if (is_array($GLOBALS['TSFE']->pSetup['inlineLanguageLabel.'])) {
+			$GLOBALS['TSFE']->addInlineLanguageLabelArray($GLOBALS['TSFE']->pSetup['inlineLanguageLabel.']);		
+		} 
+		
+		if (is_array($GLOBALS['TSFE']->pSetup['inlineSettings.'])) {
+			$GLOBALS['TSFE']->addInlineSettingArray('TS', $GLOBALS['TSFE']->pSetup['inlineSettings.']);		
+		}
+		 
+		if (is_array($GLOBALS['TSFE']->pSetup['extOnReady.'])) {
+			$GLOBALS['TSFE']->addExtOnReadyCode($GLOBALS['TSFE']->cObj->cObjGet($GLOBALS['TSFE']->pSetup['extOnReady.'], 'extOnReady.'));		
+		}
+		 
+			// compression and concatenate settings
+		if ($GLOBALS['TSFE']->config['config']['minifyCSS']) {
+			$GLOBALS['TSFE']->setCompressCss();
+		}
+		if ($GLOBALS['TSFE']->config['config']['minifyJS']) {
+			$GLOBALS['TSFE']->setCompressJavascript();
+		}
+		if ($GLOBALS['TSFE']->config['config']['concatenateJsAndCss']) {
+			$GLOBALS['TSFE']->setConcatenateFiles();
+		}
+		
+		// add header data block
+		if ($GLOBALS['TSFE']->additionalHeaderData) {
+			$GLOBALS['TSFE']->addHeaderData(implode(chr(10), $GLOBALS['TSFE']->additionalHeaderData));
+		}
+		
+		// add footer data block
+		if ($GLOBALS['TSFE']->additionalFooterData) {
+			$GLOBALS['TSFE']->addFooterData(implode(chr(10), $GLOBALS['TSFE']->additionalFooterData));
+		}
+		
+		// Header complete, now add content
+		
 
-		$GLOBALS['TSFE']->content.= chr(10).implode($GLOBALS['TSFE']->additionalHeaderData,chr(10)).'
-</head>';
-		if ($GLOBALS['TSFE']->pSetup['frameSet.'])	{
+		if ($GLOBALS['TSFE']->pSetup['frameSet.']) {
 			$fs = t3lib_div::makeInstance('tslib_frameset');
-			$GLOBALS['TSFE']->content.= $fs->make($GLOBALS['TSFE']->pSetup['frameSet.']);
-			$GLOBALS['TSFE']->content.= chr(10).'<noframes>'.chr(10);
+			$GLOBALS['TSFE']->addBodyContent($fs->make($GLOBALS['TSFE']->pSetup['frameSet.']));
+			$GLOBALS['TSFE']->addBodyContent(chr(10) . '<noframes>' . chr(10));
 		}
-
-			// Bodytag:
-		$defBT = $GLOBALS['TSFE']->pSetup['bodyTagCObject'] ? $GLOBALS['TSFE']->cObj->cObjGetSingle($GLOBALS['TSFE']->pSetup['bodyTagCObject'],$GLOBALS['TSFE']->pSetup['bodyTagCObject.'],'bodyTagCObject') : '';
-		if (!$defBT)	$defBT = $GLOBALS['TSFE']->defaultBodyTag;
+		
+		// Bodytag:
+		$defBT = $GLOBALS['TSFE']->pSetup['bodyTagCObject'] ? $GLOBALS['TSFE']->cObj->cObjGetSingle($GLOBALS['TSFE']->pSetup['bodyTagCObject'], $GLOBALS['TSFE']->pSetup['bodyTagCObject.'], 'bodyTagCObject') : '';
+		if (! $defBT)
+			$defBT = $GLOBALS['TSFE']->defaultBodyTag;
 		$bodyTag = $GLOBALS['TSFE']->pSetup['bodyTag'] ? $GLOBALS['TSFE']->pSetup['bodyTag'] : $defBT;
-		if ($bgImg=$GLOBALS['TSFE']->cObj->getImgResource($GLOBALS['TSFE']->pSetup['bgImg'],$GLOBALS['TSFE']->pSetup['bgImg.']))	{
-			$bodyTag = preg_replace('/>$/','',trim($bodyTag)).' background="'.$GLOBALS["TSFE"]->absRefPrefix.$bgImg[3].'">';
+		if ($bgImg = $GLOBALS['TSFE']->cObj->getImgResource($GLOBALS['TSFE']->pSetup['bgImg'], $GLOBALS['TSFE']->pSetup['bgImg.'])) {
+			$bodyTag = preg_replace('/>$/', '', trim($bodyTag)) . ' background="' . $GLOBALS["TSFE"]->absRefPrefix . $bgImg[3] . '">';
 		}
-
-		if (isset($GLOBALS['TSFE']->pSetup['bodyTagMargins']))	{
+		
+		if (isset($GLOBALS['TSFE']->pSetup['bodyTagMargins'])) {
 			$margins = intval($GLOBALS['TSFE']->pSetup['bodyTagMargins']);
-			if ($GLOBALS['TSFE']->pSetup['bodyTagMargins.']['useCSS'])	{
+			if ($GLOBALS['TSFE']->pSetup['bodyTagMargins.']['useCSS']) {
 				// Setting margins in CSS, see above
 			} else {
-				$bodyTag = preg_replace('/>$/','',trim($bodyTag)).' leftmargin="'.$margins.'" topmargin="'.$margins.'" marginwidth="'.$margins.'" marginheight="'.$margins.'">';
+				$bodyTag = preg_replace('/>$/', '', trim($bodyTag)) . ' leftmargin="' . $margins . '" topmargin="' . $margins . '" marginwidth="' . $margins . '" marginheight="' . $margins . '">';
 			}
 		}
-
-		if (trim($GLOBALS['TSFE']->pSetup['bodyTagAdd']))	{
-			$bodyTag = preg_replace('/>$/','',trim($bodyTag)).' '.trim($GLOBALS['TSFE']->pSetup['bodyTagAdd']).'>';
+		
+		if (trim($GLOBALS['TSFE']->pSetup['bodyTagAdd'])) {
+			$bodyTag = preg_replace('/>$/', '', trim($bodyTag)) . ' ' . trim($GLOBALS['TSFE']->pSetup['bodyTagAdd']) . '>';
 		}
-
-		if (count($JSef[1]))	{	// Event functions:
-			$bodyTag = preg_replace('/>$/','',trim($bodyTag)).' '.trim(implode(' ',$JSef[1])).'>';
+		
+		if (count($JSef[1])) { // Event functions:
+			$bodyTag = preg_replace('/>$/', '', trim($bodyTag)) . ' ' . trim(implode(' ', $JSef[1])) . '>';
 		}
-		$GLOBALS['TSFE']->content.= chr(10).$bodyTag;
-
-
-			// Div-sections
-		if ($GLOBALS['TSFE']->divSection)	{
-			$GLOBALS['TSFE']->content.= chr(10).$GLOBALS['TSFE']->divSection;
+		$GLOBALS['TSFE']->addBodyContent(chr(10) . $bodyTag);
+		
+		// Div-sections
+		if ($GLOBALS['TSFE']->divSection) {
+			$GLOBALS['TSFE']->addBodyContent(chr(10) . $GLOBALS['TSFE']->divSection);
 		}
-
-			// Page content
-		$GLOBALS['TSFE']->content.= chr(10).$pageContent;
-
-			// Ending page
-		$GLOBALS['TSFE']->content.= chr(10).'</body>';
-		if ($GLOBALS['TSFE']->pSetup['frameSet.'])	{
-			$GLOBALS['TSFE']->content.= chr(10).'</noframes>';
+		
+		// Page content
+		$GLOBALS['TSFE']->addBodyContent(chr(10) . $pageContent);
+		
+		// Render complete page
+		$GLOBALS['TSFE']->content = $GLOBALS['TSFE']->render();
+		
+		// Ending page
+		if ($GLOBALS['TSFE']->pSetup['frameSet.']) {
+			$GLOBALS['TSFE']->content .= chr(10) . '</noframes>';
 		}
-		$GLOBALS['TSFE']->content.=chr(10).'</html>';
+	
 	}
-
-
-
-
-
-
-
-
-
-
-
-
-
+	
 	/*************************
 	 *
 	 * Helper functions
 	 * Remember: Calls internally must still be done on the non-instantiated class: TSpagegen::inline2TempFile()
 	 *
 	 *************************/
-
+	
 	/**
 	 * Writes string to a temporary file named after the md5-hash of the string
 	 *
@@ -888,33 +1036,31 @@
 	 * @param	string		Extension: "css" or "js"
 	 * @return	string		<script> or <link> tag for the file.
 	 */
-	public static function inline2TempFile($str,$ext) {
-
-			// Create filename / tags:
+	public static function inline2TempFile($str, $ext) {
+		
+		// Create filename / tags:
 		$script = '';
-		switch($ext)	{
-			case 'js':
-				$script = 'typo3temp/javascript_'.substr(md5($str),0,10).'.js';
-				$output = '
-	<script type="text/javascript" src="'.htmlspecialchars($GLOBALS['TSFE']->absRefPrefix.$script).'"></script>';
-			break;
-			case 'css':
-				$script = 'typo3temp/stylesheet_'.substr(md5($str),0,10).'.css';
-				$output = '
-	<link rel="stylesheet" type="text/css" href="'.htmlspecialchars($GLOBALS['TSFE']->absRefPrefix.$script).'" />';
-			break;
+		switch ($ext) {
+			case 'js' :
+				$script = 'typo3temp/javascript_' . substr(md5($str), 0, 10) . '.js';
+				$output = $GLOBALS['TSFE']->absRefPrefix . $script;
+				break;
+			case 'css' :
+				$script = 'typo3temp/stylesheet_' . substr(md5($str), 0, 10) . '.css';
+				$output = $GLOBALS['TSFE']->absRefPrefix . $script;
+				break;
 		}
-
-			// Write file:
-		if ($script)	{
-			if (!@is_file(PATH_site.$script))	{
-				t3lib_div::writeFile(PATH_site.$script,$str);
+		
+		// Write file:
+		if ($script) {
+			if (! @is_file(PATH_site . $script)) {
+				t3lib_div::writeFile(PATH_site . $script, $str);
 			}
 		}
-
+		
 		return $output;
 	}
-
+	
 	/**
 	 * Checks if the value defined in "config.linkVars" contains an allowed value. Otherwise, return false which means the value will not be added to any links.
 	 *
@@ -922,51 +1068,53 @@
 	 * @param	string		The string to find in $haystack
 	 * @return	boolean		Returns true if $needle matches or is found in $haystack
 	 */
-	public static function isAllowedLinkVarValue($haystack,$needle) {
+	public static function isAllowedLinkVarValue($haystack, $needle) {
 		$OK = false;
+		
+		if ($needle == 'int' || $needle == 'integer') { // Integer
+			
 
-		if ($needle=='int' || $needle=='integer')	{	// Integer
-
-			if (t3lib_div::testInt($haystack))	{
+			if (t3lib_div::testInt($haystack)) {
 				$OK = true;
 			}
+		
+		} elseif (preg_match('/^\/.+\/[imsxeADSUXu]*$/', $needle)) { // Regular expression, only "//" is allowed as delimiter
+			
 
-		} elseif (preg_match('/^\/.+\/[imsxeADSUXu]*$/', $needle))	{	// Regular expression, only "//" is allowed as delimiter
-
-			if (@preg_match($needle, $haystack))	{
+			if (@preg_match($needle, $haystack)) {
 				$OK = true;
 			}
+		
+		} elseif (strstr($needle, '-')) { // Range
+			
 
-		} elseif (strstr($needle,'-'))	{	// Range
-
-			if (t3lib_div::testInt($haystack))	{
-				$range = explode('-',$needle);
-				if ($range[0] <= $haystack && $range[1] >= $haystack)	{
+			if (t3lib_div::testInt($haystack)) {
+				$range = explode('-', $needle);
+				if ($range[0] <= $haystack && $range[1] >= $haystack) {
 					$OK = true;
 				}
 			}
+		
+		} elseif (strstr($needle, '|')) { // List
+			
 
-		} elseif (strstr($needle,'|'))	{	// List
-
-			$haystack = str_replace(' ','',$haystack);	// Trim the input
-			if (strstr('|'.$needle.'|', '|'.$haystack.'|'))	{
+			$haystack = str_replace(' ', '', $haystack); // Trim the input
+			if (strstr('|' . $needle . '|', '|' . $haystack . '|')) {
 				$OK = true;
 			}
-
-		} elseif (!strcmp($needle,$haystack))	{	// String comparison
+		
+		} elseif (! strcmp($needle, $haystack)) { // String comparison
 			$OK = true;
 		}
-
+		
 		return $OK;
 	}
 }
 
-if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_pagegen.php'])	{
-	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_pagegen.php']);
+if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_pagegen.php']) {
+	include_once ($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_pagegen.php']);
 }
 
-
-
 /**
  * Class for fetching record relations for the frontend.
  *
@@ -976,7 +1124,7 @@
  * @see tslib_cObj::RECORDS()
  */
 class FE_loadDBGroup extends t3lib_loadDBGroup {
-	var $fromTC = 0;	// Means that everything is returned instead of only uid and label-field
+	var $fromTC = 0; // Means that everything is returned instead of only uid and label-field
 }
 
 ?>
\ No newline at end of file
Index: typo3/template.php
===================================================================
--- typo3/template.php	(revision 5883)
+++ typo3/template.php	(working copy)
@@ -156,7 +156,7 @@
  * @package TYPO3
  * @subpackage core
  */
-class template {
+class template extends t3lib_pageRender {
 
 		// Vars you typically might want to/should set from outside after making instance of this class:
 	var $backPath = '';				// 'backPath' pointing back to the PATH_typo3
@@ -204,25 +204,16 @@
 	var $sectionFlag=0;				// Internal: Indicates if a <div>-output section is open
 	var $divClass = '';				// (Default) Class for wrapping <DIV>-tag of page. Is set in class extensions.
 
-		// internal flags for JS-libraries
-	protected $addPrototype = false;
-	protected $addScriptaculousModules = array(
-		'builder'  => false,
-		'effects'  => false,
-		'dragdrop' => false,
-		'controls' => false,
-		'slider'   => false
-	);
-	protected $addExtJS = false;
-	protected $extJSadapter = 'ext/ext-base.js';
-	protected $enableExtJsDebug = false;
+	var $pageHeaderBlock = '';
+	var $endOfPageJsBlock = '';
 
-	// available adapters for extJs
-	const EXTJS_ADAPTER_JQUERY = 'jquery';
-	const EXTJS_ADAPTER_PROTOTYPE = 'prototype';
-	const EXTJS_ADAPTER_YUI = 'yui';
+	var $hasDocheader = true;
 
+    	// class for render the header / footer
 
+    var $pageHeaderFooterTemplateFile = '';	// alternative template file
+
+
 	/**
 	 * Constructor
 	 * Imports relevant parts from global $TBE_STYLES (colorscheme)
@@ -231,6 +222,7 @@
 	 */
 	function template()	{
 		global $TBE_STYLES;
+		parent::__construct();
 
 			// Setting default scriptID:
 		if (($temp_M = (string) t3lib_div::_GET('M')) && $GLOBALS['TBE_MODULES']['_PATHS'][$temp_M]) {
@@ -269,6 +261,8 @@
 
 			// Background image
 		if ($TBE_STYLES['background'])	$this->backGroundImage = $TBE_STYLES['background'];
+		
+		
 	}
 
 
@@ -631,18 +625,22 @@
 			}
 		}
 
-			// Get META tag containing the currently selected charset for backend output. The function sets $this->charSet.
-		$charSet = $this->initCharset();
-		$generator = $this->generator();
-
+			// alternative template for Header and Footer
+		if ($this->pageHeaderFooterTemplateFile) {
+			$file =  t3lib_div::getFileAbsFileName($this->pageHeaderFooterTemplateFile, TRUE);
+			if ($file) {
+				$this->setAlternativeTemplateFile($file);
+			}
+		}
 			// For debugging: If this outputs "QuirksMode"/"BackCompat" (IE) the browser runs in quirks-mode. Otherwise the value is "CSS1Compat"
 #		$this->JScodeArray[]='alert(document.compatMode);';
 
 			// Send HTTP header for selected charset. Added by Robert Lemke 23.10.2003
+		$this->initCharset();
 		header ('Content-Type:text/html;charset='.$this->charset);
 
 			// Standard HTML tag
-		$htmlTag = '<html xmlns="http://www.w3.org/1999/xhtml">';
+		$this->setHtmlTag('<html xmlns="http://www.w3.org/1999/xhtml">');
 
 		switch($this->docType)	{
 			case 'html_3':
@@ -697,26 +695,36 @@
 			}
 		}
 
+		$this->setXmlPrologAndDocType($headerStart);
+		$this->setHeadTag('<head>' . chr(10). '<!-- TYPO3 Script ID: '.htmlspecialchars($this->scriptID).' -->');
+		$this->setCharSet($this->charset);	
+		$this->addMetaTag($this->generator());	
+		$this->setTitle($title);
+		
+		// add docstyles
+		$this->docStyle();
+		
+		
+		// add jsCode - has to go to headerData as it may contain the script tags already
+		$this->addHeaderData($this->JScode);
+		
+		foreach ($this->JScodeArray as $name => $code) {
+			$this->addJsInlineCode($name, $code);	
+		}
+		
+		if ($this->extJScode) {
+			$this->addJsHandlerCode($this->extJScode, t3lib_pageIncludes::JSHANDLER_EXTONREADY);
+		}
+
 			// Construct page header.
-		$str = $headerStart . chr(10) . $htmlTag . '
-<head>
-	<!-- TYPO3 Script ID: '.htmlspecialchars($this->scriptID).' -->
-	'.$charSet.'
-	'.$generator.'
-	<title>'.htmlspecialchars($title).'</title>
-	'.$this->docStyle().'
-	' . $this->renderJSlibraries() . '
-	'.$this->JScode.'
-	'.$this->wrapScriptTags(implode("\n", $this->JScodeArray)).
-	($this->extJScode ? $this->wrapScriptTags('Ext.onReady(function() {' . chr(10) . $this->extJScode . chr(10) . '});') : '') .
-	'
-	<!--###POSTJSMARKER###-->
-</head>
-';
+		$str = $this->render(1);
+        
 		$this->JScodeLibArray = array();
 		$this->JScode = $this->extJScode = '';
 		$this->JScodeArray = array();
 
+		$this->endOfPageJsBlock = $this->render(2);
+		
 		if ($this->docType=='xhtml_frames')	{
 			return $str;
 		} else
@@ -749,13 +757,12 @@
 			$str .= ($this->divClass?'
 
 <!-- Wrapping DIV-section for whole page END -->
-</div>':'').'
-</body>	';
+</div>':'') . $this->endOfPageJsBlock ;
 
 		}
 
-		$str .= '</html>';
 
+
 			// Logging: Can't find better place to put it:
 		if (TYPO3_DLOG)	t3lib_div::devLog('END of BACKEND session', 'template', 0, array('_FLUSH' => true));
 
@@ -955,30 +962,22 @@
 		$this->inDocStylesArray[] = $this->inDocStyles_TBEstyle;
 
 			// Implode it all:
-		$inDocStyles = implode('
-					',$this->inDocStylesArray);
+		$inDocStyles = implode(chr(10), $this->inDocStylesArray);
 
-			// The default color scheme should also in full be represented in the stylesheet.
-		$style=trim('
-			'.($this->styleSheetFile?'<link rel="stylesheet" type="text/css" href="'.$this->backPath.$this->styleSheetFile.'" />':'').'
-			'.($this->styleSheetFile2?'<link rel="stylesheet" type="text/css" href="'.$this->backPath.$this->styleSheetFile2.'" />':'').'
-			<style type="text/css" id="internalStyle">
-				/*<![CDATA[*/
-					'.trim($inDocStyles).'
-					/*###POSTCSSMARKER###*/
-				/*]]>*/
-			</style>
-			'.($this->styleSheetFile_post?'<link rel="stylesheet" type="text/css" href="'.$this->backPath.$this->styleSheetFile_post.'" />':'').'
-			'.implode("\n", $this->additionalStyleSheets)
-		)
-		;
-		$this->inDocStyles='';
-		$this->inDocStylesArray=array();
+		if ($this->styleSheetFile) {
+		   $this->addCssFile($this->backPath . $this->styleSheetFile);					
+		}
+		if ($this->styleSheetFile2) {
+			$this->addCssFile($this->backPath . $this->styleSheetFile2);					
+		}
 
-		return '
-			'.$style;
+		$this->addCssInlineBlock('inDocStyles', $inDocStyles . chr(10) . '/*###POSTCSSMARKER###*/');
+		if ($this->styleSheetFile_post) {
+			$this->addCssFile($this->backPath . $this->styleSheetFile_post);
 	}
 
+	}
+
 	/**
 	 * Insert additional style sheet link
 	 *
@@ -989,10 +988,8 @@
 	 * @return	void
 	 */
 	function addStyleSheet($key, $href, $title='', $relation='stylesheet') {
-		if (!isset($this->additionalStyleSheets[$key])) {
-			$this->additionalStyleSheets[$key] = '<link rel="' . $relation . '" type="text/css" href="' . $href . '"' . ($title ? (' title="' . $title . '"') : '') . ' />';
+		$this->addCssFile($this->backPath . $href, $relation, $title);
 		}
-	 }
 
 	/**
 	 * Insert post rendering document style into already rendered content
@@ -1318,26 +1315,10 @@
 	 * @return	void
 	 */
 	function loadJavascriptLib($lib)	{
-		if (!isset($this->JScodeLibArray[$lib]))	{
-			$this->JScodeLibArray[$lib] = '<script type="text/javascript" src="' . $this->backPath . $lib . '"></script>';
+		$this->addJsFile($this->backPath . $lib);
 		}
-	}
 
 
-	/**
-	 *
-	 * @param string $lib	it will remove lib from general JScodeLibArray because lib is loaded already.
-	 */
-	protected function removeJavascriptLib($lib) {
-		if (count($this->JScodeLibArray)) {
-			$scripts = array_keys($this->JScodeLibArray);
-			foreach ($scripts as $script) {
-				if (strpos($script, '/' . $lib . '/') !== false) {
-					unset ($this->JScodeLibArray[$script]);
-				}
-			}
-		}
-	}
 
 	/**
 	 * Includes the necessary Javascript function for the clickmenu (context sensitive menus) in the document
@@ -2087,163 +2068,12 @@
 	}
 
 
-	/**
-	 *  Following functions are help function for JS library include.
-	 *  They enable loading the libraries prototype, scriptaculous and extJS from contrib-directory
-	 */
 
 
-	/**
-	 * Function for render the JS-libraries in header
-	 * Load order is prototype / scriptaculous / extJS
-	 */
-	protected function renderJSlibraries() {
-		$libs = array();
 
-			// include prototype
-		if ($this->addPrototype) {
-			$libs[] = 'contrib/prototype/prototype.js';
-				// remove prototype from JScodeLibArray
-			$this->removeJavascriptLib('prototype');
 		}
 
-			// include scriptaculous
-		if ($this->addScriptaculous) {
-			$mods = array();
-			foreach ($this->addScriptaculousModules as $key => $value) {
-				if ($this->addScriptaculousModules[$key]) {
-					$mods[] = $key;
-				}
-			}
-				// resolve dependencies
-			if (in_array('dragdrop', $mods) || in_array('controls', $mods)) {
-				$mods = array_merge(array('effects'), $mods);
-			}
 
-			if (count($mods)) {
-				$moduleLoadString = '?load=' . implode(',', $mods);
-			}
-			$libs[] = 'contrib/scriptaculous/scriptaculous.js' . $moduleLoadString;
-				// remove scriptaculous from JScodeLibArray
-			$this->removeJavascriptLib('scriptaculous');
-		}
-
-			// include extJS
-		if ($this->addExtJS) {
-				// use the base adapter all the time
-			$libs[] = 'contrib/extjs/adapter/' . ($this->enableExtJsDebug ? str_replace('.js', '-debug.js', $this->extJSadapter) : $this->extJSadapter);
-			$libs[] = 'contrib/extjs/ext-all' . ($this->enableExtJsDebug ? '-debug' : '') . '.js';
-
-				// add extJS localization
-			$localeMap = $GLOBAL['LANG']->csConvObj->isoArray;	// load standard ISO mapping and modify for use with ExtJS
-			$localeMap[''] = 'en';
-			$localeMap['default'] = 'en';
-			$localeMap['gr'] = 'el_GR';	// Greek
-			$localeMap['no'] = 'no_BO';	// Norwegian Bokmaal
-			$localeMap['se'] = 'se_SV';	// Swedish
-			$extJsLang = isset($localeMap[$GLOBALS['BE_USER']->uc['lang']]) ? $localeMap[$GLOBALS['BE_USER']->uc['lang']] : $GLOBALS['BE_USER']->uc['lang'];
-			// TODO autoconvert file from UTF8 to current BE charset if necessary!!!!
-			$extJsLocaleFile = 'contrib/extjs/locale/ext-lang-' . $extJsLang . '-min.js';
-			if (file_exists(PATH_typo3 . $extJsLocaleFile)) {
-				$libs[] = $extJsLocaleFile;
-			}
-				// set clear.gif
-			$this->extJScode .= 'Ext.BLANK_IMAGE_URL = "' . htmlspecialchars(t3lib_div::locationHeaderUrl('gfx/clear.gif')) . '";';
-				// remove extjs from JScodeLibArray
-			$this->removeJavascriptLib('contrib/extjs');
-		}
-
-		foreach ($libs as &$lib) {
-			$lib = '<script type="text/javascript" src="' . $this->backPath . $lib . '"></script>';
-		}
-
-			// add other JavascriptLibs and return it
-		$libs = array_merge($libs, $this->JScodeLibArray);
-		return count($libs) ? chr(10) . chr(10) . implode(chr(10), $libs) . chr(10) . chr(10) : '';
-	}
-
-	/**
-	 *  call function if you need the prototype library
-	 */
-	public function loadPrototype() {
-		$this->addPrototype = true;
-	}
-
-	/**
-	 *  call function if you need the Scriptaculous library
-	 * @param string $modules   add modules you need. use "all" if you need complete modules
-	 */
-	public function loadScriptaculous($modules='') {
-			// Scriptaculous require prototype, so load prototype too.
-		$this->addPrototype = true;
-		$this->addScriptaculous = true;
-		if ($modules) {
-			if ($modules == 'all') {
-				foreach ($this->addScriptaculousModules as $key => $value) {
-					$this->addScriptaculousModules[$key] = true;
-				}
-			} else {
-				$mods = t3lib_div::trimExplode(',', $modules);
-				foreach ($mods as $mod) {
-					if (isset($this->addScriptaculousModules[strtolower($mod)])) {
-						$this->addScriptaculousModules[strtolower($mod)] = true;
-					}
-				}
-			}
-		}
-	}
-
-	/**
-	 *  call this function if you need the extJS library
-	 * @param boolean $css flag, if set the ext-css will be loaded
-	 * @param boolean $theme flag, if set the ext-theme "grey" will be loaded
-	 * @param string $adapter choose alternative adapter, possible values: yui, prototype, jquery
-	 */
-	public function loadExtJS($css = true, $theme = true, $adapter = '') {
-		if ($adapter) {
-				// empty $adapter will always load the ext adapter
-			switch (t3lib_div::strtolower(trim($adapter))) {
-				case template::EXTJS_ADAPTER_YUI:
-					$this->extJSadapter = 'yui/ext-yui-adapter.js';
-				break;
-				case template::EXTJS_ADAPTER_PROTOTYPE:
-				    $this->extJSadapter = 'prototype/ext-prototype-adapter.js';
-				break;
-				case template::EXTJS_ADAPTER_JQUERY:
-					$this->extJSadapter = 'jquery/ext-jquery-adapter.js';
-				break;
-			}
-		}
-		if (!$this->addExtJS) {
-			$this->addExtJS = true;
-			if ($css) {
-				if (isset($GLOBALS['TBE_STYLES']['extJS']['all'])) {
-					$this->addStyleSheet('ext-all', $this->backPath . $GLOBALS['TBE_STYLES']['extJS']['all']);
-				} else {
-					$this->addStyleSheet('ext-all', $this->backPath . 'contrib/extjs/resources/css/ext-all-notheme.css');
-				}
-			}
-			if ($theme) {
-				if (isset($GLOBALS['TBE_STYLES']['extJS']['theme'])) {
-					$this->addStyleSheet('ext-theme', $this->backPath . $GLOBALS['TBE_STYLES']['extJS']['theme']);
-				} else {
-					$this->addStyleSheet('ext-theme', $this->backPath . 'contrib/extjs/resources/css/xtheme-blue.css');
-				}
-			}
-		}
-	}
-
-	/**
-	 * call this function to load debug version of extJS. Use this for development only
-	 */
-	public function enableExtJsDebug() {
-		$this->enableExtJsDebug = true;
-	}
-
-
-}
-
-
 // ******************************
 // Extension classes of the template class.
 // These are meant to provide backend screens with different widths.
Index: typo3/templates/pagerender.html
===================================================================
--- typo3/templates/pagerender.html	(revision 0)
+++ typo3/templates/pagerender.html	(revision 0)
@@ -0,0 +1,29 @@
+###XMLPROLOG_DOCTYPE###
+###HTMLTAG###
+###HEADTAG###
+
+###METACHARSET###
+###INLINECOMMENT###
+
+###BASEURL###
+###SHORTCUT###
+###TITLE###
+###META###
+
+###CSS_INCLUDE###
+###CSS_INLINE###
+
+###JS_LIBS###
+###JS_INCLUDE###
+###JS_INLINE###
+
+###HEADERDATA###
+<!--###POSTJSMARKER###-->
+</head>
+###BODY###
+###JS_LIBS_FOOTER###
+###JS_INCLUDE_FOOTER###
+###JS_INLINE_FOOTER###
+###FOOTERDATA###
+</body>
+</html>
